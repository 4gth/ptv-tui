// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3StoppingPattern v3 stopping pattern
//
// swagger:model V3.StoppingPattern
type V3StoppingPattern struct {

	// Timetabled and real-time service departures
	Departures []*V3PatternDeparture `json:"departures"`

	// Directions of travel of route
	Directions map[string]V3Direction `json:"directions,omitempty"`

	// Disruption information applicable to relevant routes or stops
	Disruptions []*V3Disruption `json:"disruptions"`

	// Train lines, tram routes, bus routes, regional coach routes, Night Bus routes
	Routes map[string]interface{} `json:"routes,omitempty"`

	// Individual trips/services of a route
	Runs map[string]V3Run `json:"runs,omitempty"`

	// API Status / Metadata
	Status *V3Status `json:"status,omitempty"`

	// A train station, tram stop, bus stop, regional coach stop or Night Bus stop
	Stops map[string]V3StoppingPatternStop `json:"stops,omitempty"`
}

// Validate validates this v3 stopping pattern
func (m *V3StoppingPattern) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepartures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisruptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStops(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3StoppingPattern) validateDepartures(formats strfmt.Registry) error {
	if swag.IsZero(m.Departures) { // not required
		return nil
	}

	for i := 0; i < len(m.Departures); i++ {
		if swag.IsZero(m.Departures[i]) { // not required
			continue
		}

		if m.Departures[i] != nil {
			if err := m.Departures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("departures" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("departures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3StoppingPattern) validateDirections(formats strfmt.Registry) error {
	if swag.IsZero(m.Directions) { // not required
		return nil
	}

	for k := range m.Directions {

		if err := validate.Required("directions"+"."+k, "body", m.Directions[k]); err != nil {
			return err
		}
		if val, ok := m.Directions[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("directions" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("directions" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3StoppingPattern) validateDisruptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Disruptions) { // not required
		return nil
	}

	for i := 0; i < len(m.Disruptions); i++ {
		if swag.IsZero(m.Disruptions[i]) { // not required
			continue
		}

		if m.Disruptions[i] != nil {
			if err := m.Disruptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disruptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disruptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3StoppingPattern) validateRuns(formats strfmt.Registry) error {
	if swag.IsZero(m.Runs) { // not required
		return nil
	}

	for k := range m.Runs {

		if err := validate.Required("runs"+"."+k, "body", m.Runs[k]); err != nil {
			return err
		}
		if val, ok := m.Runs[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runs" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("runs" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3StoppingPattern) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *V3StoppingPattern) validateStops(formats strfmt.Registry) error {
	if swag.IsZero(m.Stops) { // not required
		return nil
	}

	for k := range m.Stops {

		if err := validate.Required("stops"+"."+k, "body", m.Stops[k]); err != nil {
			return err
		}
		if val, ok := m.Stops[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stops" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stops" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v3 stopping pattern based on the context it is used
func (m *V3StoppingPattern) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDepartures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDirections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisruptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3StoppingPattern) contextValidateDepartures(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Departures); i++ {

		if m.Departures[i] != nil {

			if swag.IsZero(m.Departures[i]) { // not required
				return nil
			}

			if err := m.Departures[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("departures" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("departures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3StoppingPattern) contextValidateDirections(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Directions {

		if val, ok := m.Directions[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V3StoppingPattern) contextValidateDisruptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Disruptions); i++ {

		if m.Disruptions[i] != nil {

			if swag.IsZero(m.Disruptions[i]) { // not required
				return nil
			}

			if err := m.Disruptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disruptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disruptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3StoppingPattern) contextValidateRuns(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Runs {

		if val, ok := m.Runs[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V3StoppingPattern) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if swag.IsZero(m.Status) { // not required
			return nil
		}

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *V3StoppingPattern) contextValidateStops(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Stops {

		if val, ok := m.Stops[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3StoppingPattern) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3StoppingPattern) UnmarshalBinary(b []byte) error {
	var res V3StoppingPattern
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
