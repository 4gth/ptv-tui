// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3BulkDeparturesRequest v3 bulk departures request
//
// swagger:model V3.BulkDeparturesRequest
type V3BulkDeparturesRequest struct {

	// Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)
	// Format: date-time
	DateUtc strfmt.DateTime `json:"date_utc,omitempty"`

	// List objects to be returned in full (i.e. expanded) - options include: all, stop, route, run, direction, disruption, none
	Expand []int32 `json:"expand"`

	// Indicates whether data related to interchanges should be included in the response (default = false)
	// When set to true, this parameter enables API clients to retrieve additional exchange information (stops, routes, runs, directions and disruptions) in a single call instead of making multiple requests
	IncludeAdvertisedInterchange bool `json:"include_advertised_interchange,omitempty"`

	// Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only
	IncludeCancelled bool `json:"include_cancelled,omitempty"`

	// Indicates if the route geopath should be returned
	IncludeGeopath bool `json:"include_geopath,omitempty"`

	// Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.
	LookBackwards bool `json:"look_backwards,omitempty"`

	// Collection of departure requests
	// Required: true
	Requests []*V3StopDepartureRequest `json:"requests"`
}

// Validate validates this v3 bulk departures request
func (m *V3BulkDeparturesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateUtc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequests(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3BulkDeparturesRequest) validateDateUtc(formats strfmt.Registry) error {
	if swag.IsZero(m.DateUtc) { // not required
		return nil
	}

	if err := validate.FormatOf("date_utc", "body", "date-time", m.DateUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

var v3BulkDeparturesRequestExpandItemsEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3,4,5,6,7,2147483647]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3BulkDeparturesRequestExpandItemsEnum = append(v3BulkDeparturesRequestExpandItemsEnum, v)
	}
}

func (m *V3BulkDeparturesRequest) validateExpandItemsEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, v3BulkDeparturesRequestExpandItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V3BulkDeparturesRequest) validateExpand(formats strfmt.Registry) error {
	if swag.IsZero(m.Expand) { // not required
		return nil
	}

	for i := 0; i < len(m.Expand); i++ {

		// value enum
		if err := m.validateExpandItemsEnum("expand"+"."+strconv.Itoa(i), "body", m.Expand[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *V3BulkDeparturesRequest) validateRequests(formats strfmt.Registry) error {

	if err := validate.Required("requests", "body", m.Requests); err != nil {
		return err
	}

	for i := 0; i < len(m.Requests); i++ {
		if swag.IsZero(m.Requests[i]) { // not required
			continue
		}

		if m.Requests[i] != nil {
			if err := m.Requests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v3 bulk departures request based on the context it is used
func (m *V3BulkDeparturesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRequests(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3BulkDeparturesRequest) contextValidateRequests(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Requests); i++ {

		if m.Requests[i] != nil {

			if swag.IsZero(m.Requests[i]) { // not required
				return nil
			}

			if err := m.Requests[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3BulkDeparturesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3BulkDeparturesRequest) UnmarshalBinary(b []byte) error {
	var res V3BulkDeparturesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
