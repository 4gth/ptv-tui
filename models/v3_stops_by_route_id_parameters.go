// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3StopsByRouteIDParameters v3 stops by route Id parameters
//
// swagger:model V3.StopsByRouteIdParameters
type V3StopsByRouteIDParameters struct {

	// Direction for which the stops need to be returned
	DirectionID int32 `json:"direction_id,omitempty"`

	// Filter geopaths by date (ISO 8601 UTC format) (default = current date)
	// Format: date-time
	GeopathUtc strfmt.DateTime `json:"geopath_utc,omitempty"`

	// Flag to specify whether additional stops for interchanges should be included in the response. Note-: To make use of this flag please pass in direction_id.
	IncludeAdvertisedInterchange bool `json:"include_advertised_interchange,omitempty"`

	// Flag to specify whether geo_path should be included in the response
	IncludeGeopath bool `json:"include_geopath,omitempty"`

	// Flag to specify whether disruptions should be included in the response
	StopDisruptions bool `json:"stop_disruptions,omitempty"`
}

// Validate validates this v3 stops by route Id parameters
func (m *V3StopsByRouteIDParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeopathUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3StopsByRouteIDParameters) validateGeopathUtc(formats strfmt.Registry) error {
	if swag.IsZero(m.GeopathUtc) { // not required
		return nil
	}

	if err := validate.FormatOf("geopath_utc", "body", "date-time", m.GeopathUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v3 stops by route Id parameters based on context it is used
func (m *V3StopsByRouteIDParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V3StopsByRouteIDParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3StopsByRouteIDParameters) UnmarshalBinary(b []byte) error {
	var res V3StopsByRouteIDParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
