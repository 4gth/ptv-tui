// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3OperatorsSocialMediaModes v3 operators social media modes
//
// swagger:model V3.OperatorsSocialMediaModes
type V3OperatorsSocialMediaModes struct {

	// metro bus
	MetroBus []*V3OperatorSocialMedia `json:"metro_bus"`

	// metro train
	MetroTrain []*V3OperatorSocialMedia `json:"metro_train"`

	// metro tram
	MetroTram []*V3OperatorSocialMedia `json:"metro_tram"`

	// regional bus
	RegionalBus []*V3OperatorSocialMedia `json:"regional_bus"`

	// regional coach
	RegionalCoach []*V3OperatorSocialMedia `json:"regional_coach"`

	// regional train
	RegionalTrain []*V3OperatorSocialMedia `json:"regional_train"`
}

// Validate validates this v3 operators social media modes
func (m *V3OperatorsSocialMediaModes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetroBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetroTrain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetroTram(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionalBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionalCoach(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionalTrain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3OperatorsSocialMediaModes) validateMetroBus(formats strfmt.Registry) error {
	if swag.IsZero(m.MetroBus) { // not required
		return nil
	}

	for i := 0; i < len(m.MetroBus); i++ {
		if swag.IsZero(m.MetroBus[i]) { // not required
			continue
		}

		if m.MetroBus[i] != nil {
			if err := m.MetroBus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metro_bus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metro_bus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3OperatorsSocialMediaModes) validateMetroTrain(formats strfmt.Registry) error {
	if swag.IsZero(m.MetroTrain) { // not required
		return nil
	}

	for i := 0; i < len(m.MetroTrain); i++ {
		if swag.IsZero(m.MetroTrain[i]) { // not required
			continue
		}

		if m.MetroTrain[i] != nil {
			if err := m.MetroTrain[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metro_train" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metro_train" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3OperatorsSocialMediaModes) validateMetroTram(formats strfmt.Registry) error {
	if swag.IsZero(m.MetroTram) { // not required
		return nil
	}

	for i := 0; i < len(m.MetroTram); i++ {
		if swag.IsZero(m.MetroTram[i]) { // not required
			continue
		}

		if m.MetroTram[i] != nil {
			if err := m.MetroTram[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metro_tram" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metro_tram" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3OperatorsSocialMediaModes) validateRegionalBus(formats strfmt.Registry) error {
	if swag.IsZero(m.RegionalBus) { // not required
		return nil
	}

	for i := 0; i < len(m.RegionalBus); i++ {
		if swag.IsZero(m.RegionalBus[i]) { // not required
			continue
		}

		if m.RegionalBus[i] != nil {
			if err := m.RegionalBus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regional_bus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regional_bus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3OperatorsSocialMediaModes) validateRegionalCoach(formats strfmt.Registry) error {
	if swag.IsZero(m.RegionalCoach) { // not required
		return nil
	}

	for i := 0; i < len(m.RegionalCoach); i++ {
		if swag.IsZero(m.RegionalCoach[i]) { // not required
			continue
		}

		if m.RegionalCoach[i] != nil {
			if err := m.RegionalCoach[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regional_coach" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regional_coach" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3OperatorsSocialMediaModes) validateRegionalTrain(formats strfmt.Registry) error {
	if swag.IsZero(m.RegionalTrain) { // not required
		return nil
	}

	for i := 0; i < len(m.RegionalTrain); i++ {
		if swag.IsZero(m.RegionalTrain[i]) { // not required
			continue
		}

		if m.RegionalTrain[i] != nil {
			if err := m.RegionalTrain[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regional_train" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regional_train" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v3 operators social media modes based on the context it is used
func (m *V3OperatorsSocialMediaModes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetroBus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetroTrain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetroTram(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegionalBus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegionalCoach(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegionalTrain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3OperatorsSocialMediaModes) contextValidateMetroBus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MetroBus); i++ {

		if m.MetroBus[i] != nil {

			if swag.IsZero(m.MetroBus[i]) { // not required
				return nil
			}

			if err := m.MetroBus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metro_bus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metro_bus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3OperatorsSocialMediaModes) contextValidateMetroTrain(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MetroTrain); i++ {

		if m.MetroTrain[i] != nil {

			if swag.IsZero(m.MetroTrain[i]) { // not required
				return nil
			}

			if err := m.MetroTrain[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metro_train" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metro_train" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3OperatorsSocialMediaModes) contextValidateMetroTram(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MetroTram); i++ {

		if m.MetroTram[i] != nil {

			if swag.IsZero(m.MetroTram[i]) { // not required
				return nil
			}

			if err := m.MetroTram[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metro_tram" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metro_tram" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3OperatorsSocialMediaModes) contextValidateRegionalBus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RegionalBus); i++ {

		if m.RegionalBus[i] != nil {

			if swag.IsZero(m.RegionalBus[i]) { // not required
				return nil
			}

			if err := m.RegionalBus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regional_bus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regional_bus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3OperatorsSocialMediaModes) contextValidateRegionalCoach(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RegionalCoach); i++ {

		if m.RegionalCoach[i] != nil {

			if swag.IsZero(m.RegionalCoach[i]) { // not required
				return nil
			}

			if err := m.RegionalCoach[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regional_coach" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regional_coach" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3OperatorsSocialMediaModes) contextValidateRegionalTrain(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RegionalTrain); i++ {

		if m.RegionalTrain[i] != nil {

			if swag.IsZero(m.RegionalTrain[i]) { // not required
				return nil
			}

			if err := m.RegionalTrain[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regional_train" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regional_train" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3OperatorsSocialMediaModes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3OperatorsSocialMediaModes) UnmarshalBinary(b []byte) error {
	var res V3OperatorsSocialMediaModes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
