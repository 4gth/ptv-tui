// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3VehiclePosition v3 vehicle position
//
// swagger:model V3.VehiclePosition
type V3VehiclePosition struct {

	// Compass bearing of the vehicle when known, clockwise from True North, i.e., 0 is North and 90 is East. May be null.
	// Only available for some bus runs.
	Bearing float64 `json:"bearing,omitempty"`

	// Date and time that the vehicle position data was supplied.
	// Format: date-time
	DatetimeUtc strfmt.DateTime `json:"datetime_utc,omitempty"`

	// CIS - Metro Train Vehicle Location Direction
	Direction string `json:"direction,omitempty"`

	// CIS - Metro Train Vehicle Location Easting coordinate
	Easting float64 `json:"easting,omitempty"`

	// CIS - Metro Train Vehicle Location data expiry time
	// Format: date-time
	ExpiryTime strfmt.DateTime `json:"expiry_time,omitempty"`

	// Geographic coordinate of latitude of the vehicle when known. May be null.
	// Only available for some bus runs.
	Latitude float64 `json:"latitude,omitempty"`

	// Geographic coordinate of longitude of the vehicle when known.
	// Only available for some bus runs.
	Longitude float64 `json:"longitude,omitempty"`

	// CIS - Metro Train Vehicle Location Northing coordinate
	Northing float64 `json:"northing,omitempty"`

	// Supplier of vehicle position data.
	Supplier string `json:"supplier,omitempty"`
}

// Validate validates this v3 vehicle position
func (m *V3VehiclePosition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatetimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3VehiclePosition) validateDatetimeUtc(formats strfmt.Registry) error {
	if swag.IsZero(m.DatetimeUtc) { // not required
		return nil
	}

	if err := validate.FormatOf("datetime_utc", "body", "date-time", m.DatetimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3VehiclePosition) validateExpiryTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiryTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expiry_time", "body", "date-time", m.ExpiryTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v3 vehicle position based on context it is used
func (m *V3VehiclePosition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V3VehiclePosition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3VehiclePosition) UnmarshalBinary(b []byte) error {
	var res V3VehiclePosition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
