// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3Journey v3 journey
//
// swagger:model V3.Journey
type V3Journey struct {

	// chronos journey log
	ChronosJourneyLog []string `json:"ChronosJourneyLog"`

	// date arrival str
	// Read Only: true
	DateArrivalStr string `json:"DateArrivalStr,omitempty"`

	// date departure str
	// Read Only: true
	DateDepartureStr string `json:"DateDepartureStr,omitempty"`

	// duration mins
	DurationMins int32 `json:"DurationMins,omitempty"`

	// fare estimate
	FareEstimate *V3FareEstimateResponse `json:"FareEstimate,omitempty"`

	// legs
	Legs []*V3JourneyLeg `json:"Legs"`

	// real time message
	RealTimeMessage string `json:"RealTimeMessage,omitempty"`

	// time arrival
	// Format: date-time
	TimeArrival strfmt.DateTime `json:"TimeArrival,omitempty"`

	// time arrival str
	// Read Only: true
	TimeArrivalStr string `json:"TimeArrivalStr,omitempty"`

	// time departure
	// Format: date-time
	TimeDeparture strfmt.DateTime `json:"TimeDeparture,omitempty"`

	// time departure str
	// Read Only: true
	TimeDepartureStr string `json:"TimeDepartureStr,omitempty"`

	// zones
	Zones []string `json:"Zones"`
}

// Validate validates this v3 journey
func (m *V3Journey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFareEstimate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLegs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeArrival(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeDeparture(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3Journey) validateFareEstimate(formats strfmt.Registry) error {
	if swag.IsZero(m.FareEstimate) { // not required
		return nil
	}

	if m.FareEstimate != nil {
		if err := m.FareEstimate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FareEstimate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FareEstimate")
			}
			return err
		}
	}

	return nil
}

func (m *V3Journey) validateLegs(formats strfmt.Registry) error {
	if swag.IsZero(m.Legs) { // not required
		return nil
	}

	for i := 0; i < len(m.Legs); i++ {
		if swag.IsZero(m.Legs[i]) { // not required
			continue
		}

		if m.Legs[i] != nil {
			if err := m.Legs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Legs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Legs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Journey) validateTimeArrival(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeArrival) { // not required
		return nil
	}

	if err := validate.FormatOf("TimeArrival", "body", "date-time", m.TimeArrival.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3Journey) validateTimeDeparture(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeDeparture) { // not required
		return nil
	}

	if err := validate.FormatOf("TimeDeparture", "body", "date-time", m.TimeDeparture.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v3 journey based on the context it is used
func (m *V3Journey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateArrivalStr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateDepartureStr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFareEstimate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLegs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeArrivalStr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeDepartureStr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3Journey) contextValidateDateArrivalStr(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "DateArrivalStr", "body", string(m.DateArrivalStr)); err != nil {
		return err
	}

	return nil
}

func (m *V3Journey) contextValidateDateDepartureStr(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "DateDepartureStr", "body", string(m.DateDepartureStr)); err != nil {
		return err
	}

	return nil
}

func (m *V3Journey) contextValidateFareEstimate(ctx context.Context, formats strfmt.Registry) error {

	if m.FareEstimate != nil {

		if swag.IsZero(m.FareEstimate) { // not required
			return nil
		}

		if err := m.FareEstimate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FareEstimate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FareEstimate")
			}
			return err
		}
	}

	return nil
}

func (m *V3Journey) contextValidateLegs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Legs); i++ {

		if m.Legs[i] != nil {

			if swag.IsZero(m.Legs[i]) { // not required
				return nil
			}

			if err := m.Legs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Legs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Legs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Journey) contextValidateTimeArrivalStr(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "TimeArrivalStr", "body", string(m.TimeArrivalStr)); err != nil {
		return err
	}

	return nil
}

func (m *V3Journey) contextValidateTimeDepartureStr(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "TimeDepartureStr", "body", string(m.TimeDepartureStr)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3Journey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3Journey) UnmarshalBinary(b []byte) error {
	var res V3Journey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
