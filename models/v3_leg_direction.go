// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3LegDirection Directions for walking leg
//
// swagger:model V3.LegDirection
type V3LegDirection struct {

	// Cumulative distance in meters
	CumDistance int32 `json:"CumDistance,omitempty"`

	// Cumulative travel time in seconds
	CumTravelTime int32 `json:"CumTravelTime,omitempty"`

	// Leg distance in meters
	Distance int32 `json:"Distance,omitempty"`

	// from path link idx
	FromPathLinkIdx string `json:"FromPathLinkIdx,omitempty"`

	// GPS latitude of leg point of origin
	Lat float32 `json:"Lat,omitempty"`

	// GPS longitude of leg point of origin
	Lon float32 `json:"Lon,omitempty"`

	// sky direction
	SkyDirection string `json:"SkyDirection,omitempty"`

	// Street name
	StreetName string `json:"StreetName,omitempty"`

	// to path link idx
	ToPathLinkIdx string `json:"ToPathLinkIdx,omitempty"`

	// Leg travel time in seconds
	TravelTime int32 `json:"TravelTime,omitempty"`

	// Leg turning direction. e.g SLIGHT_RIGHT, LEFT, SHARP_LEFT, STRAIGHT, UNKNOWN_TURN_DIRECTION
	TurnDirection string `json:"TurnDirection,omitempty"`

	// Leg turning manoeuvre, e.g ORIGIN, DESTINATION, KEEP, TURN
	TurningManoeuvre string `json:"TurningManoeuvre,omitempty"`
}

// Validate validates this v3 leg direction
func (m *V3LegDirection) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this v3 leg direction based on context it is used
func (m *V3LegDirection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V3LegDirection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3LegDirection) UnmarshalBinary(b []byte) error {
	var res V3LegDirection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
