// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3PatternDeparture v3 pattern departure
//
// swagger:model V3.PatternDeparture
type V3PatternDeparture struct {

	// Indicates if the metropolitan train service is at the platform at the time of query; returns false for other modes
	AtPlatform bool `json:"at_platform,omitempty"`

	// Additional descriptive text associated with the departure
	DepartureNote string `json:"departure_note,omitempty"`

	// Chronological sequence for the departures in a run. Order ascendingly by this field to get chronological order (earliest first) of departures with the same run_ref. NOTE, this field is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4
	DepartureSequence int32 `json:"departure_sequence,omitempty"`

	// Direction of travel identifier
	DirectionID int32 `json:"direction_id,omitempty"`

	// Disruption information identifier(s)
	DisruptionIds []int64 `json:"disruption_ids"`

	// Real-time estimate of departure time and date in ISO 8601 UTC format
	// Format: date-time
	EstimatedDepartureUtc strfmt.DateTime `json:"estimated_departure_utc,omitempty"`

	// Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag)
	Flags string `json:"flags,omitempty"`

	// Platform number at stop (metropolitan train only; returns null for other modes)
	PlatformNumber string `json:"platform_number,omitempty"`

	// Route identifier
	RouteID int32 `json:"route_id,omitempty"`

	// Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric
	// Read Only: true
	RunID int32 `json:"run_id,omitempty"`

	// Alphanumeric trip/service run identifier
	RunRef string `json:"run_ref,omitempty"`

	// Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format
	// Format: date-time
	ScheduledDepartureUtc strfmt.DateTime `json:"scheduled_departure_utc,omitempty"`

	// The stops to be skipped following the current departure in order.
	SkippedStops []*V3StopModel `json:"skipped_stops"`

	// Stop identifier
	StopID int32 `json:"stop_id,omitempty"`
}

// Validate validates this v3 pattern departure
func (m *V3PatternDeparture) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEstimatedDepartureUtc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledDepartureUtc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkippedStops(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3PatternDeparture) validateEstimatedDepartureUtc(formats strfmt.Registry) error {
	if swag.IsZero(m.EstimatedDepartureUtc) { // not required
		return nil
	}

	if err := validate.FormatOf("estimated_departure_utc", "body", "date-time", m.EstimatedDepartureUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3PatternDeparture) validateScheduledDepartureUtc(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledDepartureUtc) { // not required
		return nil
	}

	if err := validate.FormatOf("scheduled_departure_utc", "body", "date-time", m.ScheduledDepartureUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3PatternDeparture) validateSkippedStops(formats strfmt.Registry) error {
	if swag.IsZero(m.SkippedStops) { // not required
		return nil
	}

	for i := 0; i < len(m.SkippedStops); i++ {
		if swag.IsZero(m.SkippedStops[i]) { // not required
			continue
		}

		if m.SkippedStops[i] != nil {
			if err := m.SkippedStops[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("skipped_stops" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("skipped_stops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v3 pattern departure based on the context it is used
func (m *V3PatternDeparture) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRunID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSkippedStops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3PatternDeparture) contextValidateRunID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "run_id", "body", int32(m.RunID)); err != nil {
		return err
	}

	return nil
}

func (m *V3PatternDeparture) contextValidateSkippedStops(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SkippedStops); i++ {

		if m.SkippedStops[i] != nil {

			if swag.IsZero(m.SkippedStops[i]) { // not required
				return nil
			}

			if err := m.SkippedStops[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("skipped_stops" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("skipped_stops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3PatternDeparture) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3PatternDeparture) UnmarshalBinary(b []byte) error {
	var res V3PatternDeparture
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
