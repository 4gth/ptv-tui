// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3SiriSubscriptionTopic v3 siri subscription topic
//
// swagger:model V3.SiriSubscriptionTopic
type V3SiriSubscriptionTopic struct {

	// Siri DirectionRef  (in, out, up, down, clockwise, counterclockwise, Inbound, Outbound)
	// Enum: [1,2,5,10,16,32,65,130]
	DirectionRef int32 `json:"direction_ref,omitempty"`

	// Siri LineRef
	// Required: true
	LineRef *string `json:"line_ref"`

	// Route Type eg. 0 (Train) 1 (Tram) 2 (Bus) 3 (Vline) 4 (NightRider)
	// Required: true
	// Enum: [0,1,2,3,4]
	RouteType *int32 `json:"route_type"`
}

// Validate validates this v3 siri subscription topic
func (m *V3SiriSubscriptionTopic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirectionRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v3SiriSubscriptionTopicTypeDirectionRefPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[1,2,5,10,16,32,65,130]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3SiriSubscriptionTopicTypeDirectionRefPropEnum = append(v3SiriSubscriptionTopicTypeDirectionRefPropEnum, v)
	}
}

// prop value enum
func (m *V3SiriSubscriptionTopic) validateDirectionRefEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, v3SiriSubscriptionTopicTypeDirectionRefPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V3SiriSubscriptionTopic) validateDirectionRef(formats strfmt.Registry) error {
	if swag.IsZero(m.DirectionRef) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionRefEnum("direction_ref", "body", m.DirectionRef); err != nil {
		return err
	}

	return nil
}

func (m *V3SiriSubscriptionTopic) validateLineRef(formats strfmt.Registry) error {

	if err := validate.Required("line_ref", "body", m.LineRef); err != nil {
		return err
	}

	return nil
}

var v3SiriSubscriptionTopicTypeRouteTypePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3,4]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3SiriSubscriptionTopicTypeRouteTypePropEnum = append(v3SiriSubscriptionTopicTypeRouteTypePropEnum, v)
	}
}

// prop value enum
func (m *V3SiriSubscriptionTopic) validateRouteTypeEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, v3SiriSubscriptionTopicTypeRouteTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V3SiriSubscriptionTopic) validateRouteType(formats strfmt.Registry) error {

	if err := validate.Required("route_type", "body", m.RouteType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRouteTypeEnum("route_type", "body", *m.RouteType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v3 siri subscription topic based on context it is used
func (m *V3SiriSubscriptionTopic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V3SiriSubscriptionTopic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3SiriSubscriptionTopic) UnmarshalBinary(b []byte) error {
	var res V3SiriSubscriptionTopic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
