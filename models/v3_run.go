// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3Run v3 run
//
// swagger:model V3.Run
type V3Run struct {

	// Name of destination of run
	DestinationName string `json:"destination_name,omitempty"`

	// Direction of travel identifier
	DirectionID int32 `json:"direction_id,omitempty"`

	// The number of remaining skipped/express stations for the run/service from a stop
	ExpressStopCount int32 `json:"express_stop_count,omitempty"`

	// external service
	// Enum: [0,1,2,3,4,5,6,7,8,9,10]
	ExternalService int32 `json:"externalService,omitempty"`

	// stop_id of final stop of run
	FinalStopID int32 `json:"final_stop_id,omitempty"`

	// Geopath of the route
	Geopath []interface{} `json:"geopath"`

	// Connection link between two runs
	Interchange *V3Interchange `json:"interchange,omitempty"`

	// Route identifier
	RouteID int32 `json:"route_id,omitempty"`

	// Transport mode identifier
	RouteType int32 `json:"route_type,omitempty"`

	// Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric
	// Read Only: true
	RunID int32 `json:"run_id,omitempty"`

	// Additional descriptive text associated with the run
	RunNote string `json:"run_note,omitempty"`

	// Alphanumeric trip/service run identifier
	RunRef string `json:"run_ref,omitempty"`

	// Chronological sequence of the trip/service run on the route in direction. Order ascendingly by this field to get chronological order (earliest first) of runs with the same route_id and direction_id.
	RunSequence int32 `json:"run_sequence,omitempty"`

	// Status of metropolitan train run; returns "scheduled" for other modes
	Status string `json:"status,omitempty"`

	// Descriptor of the trip/service run. Only available for some runs. May be null.
	VehicleDescriptor *V3VehicleDescriptor `json:"vehicle_descriptor,omitempty"`

	// Position of the trip/service run. Available for some Bus, Nightrider and Train runs. May be null.
	VehiclePosition *V3VehiclePosition `json:"vehicle_position,omitempty"`
}

// Validate validates this v3 run
func (m *V3Run) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterchange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVehicleDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVehiclePosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v3RunTypeExternalServicePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3,4,5,6,7,8,9,10]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3RunTypeExternalServicePropEnum = append(v3RunTypeExternalServicePropEnum, v)
	}
}

// prop value enum
func (m *V3Run) validateExternalServiceEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, v3RunTypeExternalServicePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V3Run) validateExternalService(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalService) { // not required
		return nil
	}

	// value enum
	if err := m.validateExternalServiceEnum("externalService", "body", m.ExternalService); err != nil {
		return err
	}

	return nil
}

func (m *V3Run) validateInterchange(formats strfmt.Registry) error {
	if swag.IsZero(m.Interchange) { // not required
		return nil
	}

	if m.Interchange != nil {
		if err := m.Interchange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interchange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("interchange")
			}
			return err
		}
	}

	return nil
}

func (m *V3Run) validateVehicleDescriptor(formats strfmt.Registry) error {
	if swag.IsZero(m.VehicleDescriptor) { // not required
		return nil
	}

	if m.VehicleDescriptor != nil {
		if err := m.VehicleDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vehicle_descriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vehicle_descriptor")
			}
			return err
		}
	}

	return nil
}

func (m *V3Run) validateVehiclePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.VehiclePosition) { // not required
		return nil
	}

	if m.VehiclePosition != nil {
		if err := m.VehiclePosition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vehicle_position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vehicle_position")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v3 run based on the context it is used
func (m *V3Run) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInterchange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVehicleDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVehiclePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3Run) contextValidateInterchange(ctx context.Context, formats strfmt.Registry) error {

	if m.Interchange != nil {

		if swag.IsZero(m.Interchange) { // not required
			return nil
		}

		if err := m.Interchange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interchange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("interchange")
			}
			return err
		}
	}

	return nil
}

func (m *V3Run) contextValidateRunID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "run_id", "body", int32(m.RunID)); err != nil {
		return err
	}

	return nil
}

func (m *V3Run) contextValidateVehicleDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if m.VehicleDescriptor != nil {

		if swag.IsZero(m.VehicleDescriptor) { // not required
			return nil
		}

		if err := m.VehicleDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vehicle_descriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vehicle_descriptor")
			}
			return err
		}
	}

	return nil
}

func (m *V3Run) contextValidateVehiclePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.VehiclePosition != nil {

		if swag.IsZero(m.VehiclePosition) { // not required
			return nil
		}

		if err := m.VehiclePosition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vehicle_position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vehicle_position")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3Run) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3Run) UnmarshalBinary(b []byte) error {
	var res V3Run
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
