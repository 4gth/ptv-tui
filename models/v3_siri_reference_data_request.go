// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3SiriReferenceDataRequest v3 siri reference data request
//
// swagger:model V3.SiriReferenceDataRequest
type V3SiriReferenceDataRequest struct {

	// Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)
	// Format: date-time
	DateUtc strfmt.DateTime `json:"date_utc,omitempty"`

	// line refs
	// Required: true
	LineRefs []*V3SiriLineRefDirectionRefStopPointRef `json:"line_refs"`

	// DIVA mapping version generated by Chronos during a Parser or RealtimeBusConfig load
	// Required: true
	MappingVersion *string `json:"mapping_version"`

	// Siri StopPointRef
	StopPointRefs []int32 `json:"stop_point_refs"`
}

// Validate validates this v3 siri reference data request
func (m *V3SiriReferenceDataRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateUtc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineRefs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappingVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3SiriReferenceDataRequest) validateDateUtc(formats strfmt.Registry) error {
	if swag.IsZero(m.DateUtc) { // not required
		return nil
	}

	if err := validate.FormatOf("date_utc", "body", "date-time", m.DateUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3SiriReferenceDataRequest) validateLineRefs(formats strfmt.Registry) error {

	if err := validate.Required("line_refs", "body", m.LineRefs); err != nil {
		return err
	}

	for i := 0; i < len(m.LineRefs); i++ {
		if swag.IsZero(m.LineRefs[i]) { // not required
			continue
		}

		if m.LineRefs[i] != nil {
			if err := m.LineRefs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("line_refs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("line_refs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3SiriReferenceDataRequest) validateMappingVersion(formats strfmt.Registry) error {

	if err := validate.Required("mapping_version", "body", m.MappingVersion); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v3 siri reference data request based on the context it is used
func (m *V3SiriReferenceDataRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLineRefs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3SiriReferenceDataRequest) contextValidateLineRefs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LineRefs); i++ {

		if m.LineRefs[i] != nil {

			if swag.IsZero(m.LineRefs[i]) { // not required
				return nil
			}

			if err := m.LineRefs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("line_refs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("line_refs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3SiriReferenceDataRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3SiriReferenceDataRequest) UnmarshalBinary(b []byte) error {
	var res V3SiriReferenceDataRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
