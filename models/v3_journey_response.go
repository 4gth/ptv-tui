// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3JourneyResponse v3 journey response
//
// swagger:model V3.JourneyResponse
type V3JourneyResponse struct {

	// chronos log
	ChronosLog []string `json:"ChronosLog"`

	// chronos start
	// Format: date-time
	ChronosStart strfmt.DateTime `json:"ChronosStart,omitempty"`

	// chronos timings
	ChronosTimings []string `json:"ChronosTimings"`

	// destination options
	DestinationOptions []*V3LocationOption `json:"DestinationOptions"`

	// itinerary
	Itinerary []*V3Journey `json:"Itinerary"`

	// origin options
	OriginOptions []*V3LocationOption `json:"OriginOptions"`

	// request Url
	RequestURL string `json:"RequestUrl,omitempty"`

	// status
	Status string `json:"Status,omitempty"`
}

// Validate validates this v3 journey response
func (m *V3JourneyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChronosStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItinerary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3JourneyResponse) validateChronosStart(formats strfmt.Registry) error {
	if swag.IsZero(m.ChronosStart) { // not required
		return nil
	}

	if err := validate.FormatOf("ChronosStart", "body", "date-time", m.ChronosStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3JourneyResponse) validateDestinationOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.DestinationOptions); i++ {
		if swag.IsZero(m.DestinationOptions[i]) { // not required
			continue
		}

		if m.DestinationOptions[i] != nil {
			if err := m.DestinationOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DestinationOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DestinationOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3JourneyResponse) validateItinerary(formats strfmt.Registry) error {
	if swag.IsZero(m.Itinerary) { // not required
		return nil
	}

	for i := 0; i < len(m.Itinerary); i++ {
		if swag.IsZero(m.Itinerary[i]) { // not required
			continue
		}

		if m.Itinerary[i] != nil {
			if err := m.Itinerary[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Itinerary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Itinerary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3JourneyResponse) validateOriginOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.OriginOptions); i++ {
		if swag.IsZero(m.OriginOptions[i]) { // not required
			continue
		}

		if m.OriginOptions[i] != nil {
			if err := m.OriginOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OriginOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OriginOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v3 journey response based on the context it is used
func (m *V3JourneyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestinationOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItinerary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3JourneyResponse) contextValidateDestinationOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DestinationOptions); i++ {

		if m.DestinationOptions[i] != nil {

			if swag.IsZero(m.DestinationOptions[i]) { // not required
				return nil
			}

			if err := m.DestinationOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DestinationOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DestinationOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3JourneyResponse) contextValidateItinerary(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Itinerary); i++ {

		if m.Itinerary[i] != nil {

			if swag.IsZero(m.Itinerary[i]) { // not required
				return nil
			}

			if err := m.Itinerary[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Itinerary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Itinerary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3JourneyResponse) contextValidateOriginOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OriginOptions); i++ {

		if m.OriginOptions[i] != nil {

			if swag.IsZero(m.OriginOptions[i]) { // not required
				return nil
			}

			if err := m.OriginOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OriginOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OriginOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3JourneyResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3JourneyResponse) UnmarshalBinary(b []byte) error {
	var res V3JourneyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
