// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3StopOnRoute v3 stop on route
//
// swagger:model V3.StopOnRoute
type V3StopOnRoute struct {

	// Disruption information identifier(s)
	DisruptionIds []int64 `json:"disruption_ids"`

	// Interchange information for connecting routes at this stop
	Interchange []*V3InterchangeRoute `json:"interchange"`

	// Transport mode identifier
	RouteType int32 `json:"route_type,omitempty"`

	// Stop identifier
	StopID int32 `json:"stop_id,omitempty"`

	// Landmark in proximity of stop
	StopLandmark string `json:"stop_landmark,omitempty"`

	// Geographic coordinate of latitude at stop
	StopLatitude float32 `json:"stop_latitude,omitempty"`

	// Geographic coordinate of longitude at stop
	StopLongitude float32 `json:"stop_longitude,omitempty"`

	// Name of stop
	StopName string `json:"stop_name,omitempty"`

	// Sequence of the stop on the route/run; return 0 when route_id or run_id not specified. Order ascendingly by this field (when non zero) to get physical order (earliest first) of stops on the route_id/run_id.
	StopSequence int32 `json:"stop_sequence,omitempty"`

	// suburb of stop
	StopSuburb string `json:"stop_suburb,omitempty"`

	// Stop ticket information
	StopTicket *V3StopTicket `json:"stop_ticket,omitempty"`
}

// Validate validates this v3 stop on route
func (m *V3StopOnRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterchange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopTicket(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3StopOnRoute) validateInterchange(formats strfmt.Registry) error {
	if swag.IsZero(m.Interchange) { // not required
		return nil
	}

	for i := 0; i < len(m.Interchange); i++ {
		if swag.IsZero(m.Interchange[i]) { // not required
			continue
		}

		if m.Interchange[i] != nil {
			if err := m.Interchange[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interchange" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interchange" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3StopOnRoute) validateStopTicket(formats strfmt.Registry) error {
	if swag.IsZero(m.StopTicket) { // not required
		return nil
	}

	if m.StopTicket != nil {
		if err := m.StopTicket.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stop_ticket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stop_ticket")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v3 stop on route based on the context it is used
func (m *V3StopOnRoute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInterchange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStopTicket(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3StopOnRoute) contextValidateInterchange(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Interchange); i++ {

		if m.Interchange[i] != nil {

			if swag.IsZero(m.Interchange[i]) { // not required
				return nil
			}

			if err := m.Interchange[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interchange" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interchange" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3StopOnRoute) contextValidateStopTicket(ctx context.Context, formats strfmt.Registry) error {

	if m.StopTicket != nil {

		if swag.IsZero(m.StopTicket) { // not required
			return nil
		}

		if err := m.StopTicket.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stop_ticket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stop_ticket")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3StopOnRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3StopOnRoute) UnmarshalBinary(b []byte) error {
	var res V3StopOnRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
