// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3JourneyPlannerParameters v3 journey planner parameters
//
// swagger:model V3.JourneyPlannerParameters
type V3JourneyPlannerParameters struct {

	// depart from
	DepartFrom bool `json:"DepartFrom,omitempty"`

	// incl bus
	InclBus bool `json:"InclBus,omitempty"`

	// incl fare estimate
	InclFareEstimate bool `json:"InclFareEstimate,omitempty"`

	// incl path coords
	InclPathCoords bool `json:"InclPathCoords,omitempty"`

	// incl reg coach
	InclRegCoach bool `json:"InclRegCoach,omitempty"`

	// incl skybus
	InclSkybus bool `json:"InclSkybus,omitempty"`

	// incl train
	InclTrain bool `json:"InclTrain,omitempty"`

	// incl tram
	InclTram bool `json:"InclTram,omitempty"`

	// incl vline
	InclVline bool `json:"InclVline,omitempty"`

	// no solid stairs
	NoSolidStairs bool `json:"NoSolidStairs,omitempty"`

	// route type
	RouteType string `json:"RouteType,omitempty"`

	// time utc
	// Format: date-time
	TimeUtc strfmt.DateTime `json:"TimeUtc,omitempty"`

	// transfer max time
	TransferMaxTime int32 `json:"TransferMaxTime,omitempty"`

	// transfer method
	TransferMethod string `json:"TransferMethod,omitempty"`

	// transfer speed
	TransferSpeed string `json:"TransferSpeed,omitempty"`

	// wheelchair
	Wheelchair bool `json:"Wheelchair,omitempty"`
}

// Validate validates this v3 journey planner parameters
func (m *V3JourneyPlannerParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3JourneyPlannerParameters) validateTimeUtc(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeUtc) { // not required
		return nil
	}

	if err := validate.FormatOf("TimeUtc", "body", "date-time", m.TimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v3 journey planner parameters based on context it is used
func (m *V3JourneyPlannerParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V3JourneyPlannerParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3JourneyPlannerParameters) UnmarshalBinary(b []byte) error {
	var res V3JourneyPlannerParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
