// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3SiriProductionTimetableSubscriptionRequest v3 siri production timetable subscription request
//
// swagger:model V3.SiriProductionTimetableSubscriptionRequest
type V3SiriProductionTimetableSubscriptionRequest struct {

	// Siri Consumer Address - Baseline and Updates will be sent to this address
	// Required: true
	ConsumerAddress *string `json:"consumer_address"`

	// Siri End Time of the Validity Period
	// Required: true
	// Format: date-time
	EndTime *strfmt.DateTime `json:"end_time"`

	// Siri Initial Termination Time - Expiry of the subscription
	// Required: true
	// Format: date-time
	InitialTerminationTime *strfmt.DateTime `json:"initial_termination_time"`

	// Siri Message Format 'xml' or 'json'
	// Required: true
	// Enum: [0,1]
	SiriFormat *int32 `json:"siri_format"`

	// Siri Message Version '1.3' or '2.0'
	// Required: true
	// Pattern: 1.3|2.0
	SiriVersion *string `json:"siri_version"`

	// Siri Start Time of the Validity Period
	// Required: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"start_time"`

	// Siri Subscriber Ref
	// Required: true
	SubscriberRef *string `json:"subscriber_ref"`

	// Siri Subscription Ref - Unique to a Subscriber Ref
	// Required: true
	SubscriptionRef *string `json:"subscription_ref"`

	// topics
	// Required: true
	Topics []*V3SiriSubscriptionTopic `json:"topics"`
}

// Validate validates this v3 siri production timetable subscription request
func (m *V3SiriProductionTimetableSubscriptionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConsumerAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialTerminationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiriFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiriVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriberRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3SiriProductionTimetableSubscriptionRequest) validateConsumerAddress(formats strfmt.Registry) error {

	if err := validate.Required("consumer_address", "body", m.ConsumerAddress); err != nil {
		return err
	}

	return nil
}

func (m *V3SiriProductionTimetableSubscriptionRequest) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("end_time", "body", m.EndTime); err != nil {
		return err
	}

	if err := validate.FormatOf("end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3SiriProductionTimetableSubscriptionRequest) validateInitialTerminationTime(formats strfmt.Registry) error {

	if err := validate.Required("initial_termination_time", "body", m.InitialTerminationTime); err != nil {
		return err
	}

	if err := validate.FormatOf("initial_termination_time", "body", "date-time", m.InitialTerminationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var v3SiriProductionTimetableSubscriptionRequestTypeSiriFormatPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3SiriProductionTimetableSubscriptionRequestTypeSiriFormatPropEnum = append(v3SiriProductionTimetableSubscriptionRequestTypeSiriFormatPropEnum, v)
	}
}

// prop value enum
func (m *V3SiriProductionTimetableSubscriptionRequest) validateSiriFormatEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, v3SiriProductionTimetableSubscriptionRequestTypeSiriFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V3SiriProductionTimetableSubscriptionRequest) validateSiriFormat(formats strfmt.Registry) error {

	if err := validate.Required("siri_format", "body", m.SiriFormat); err != nil {
		return err
	}

	// value enum
	if err := m.validateSiriFormatEnum("siri_format", "body", *m.SiriFormat); err != nil {
		return err
	}

	return nil
}

func (m *V3SiriProductionTimetableSubscriptionRequest) validateSiriVersion(formats strfmt.Registry) error {

	if err := validate.Required("siri_version", "body", m.SiriVersion); err != nil {
		return err
	}

	if err := validate.Pattern("siri_version", "body", *m.SiriVersion, `1.3|2.0`); err != nil {
		return err
	}

	return nil
}

func (m *V3SiriProductionTimetableSubscriptionRequest) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3SiriProductionTimetableSubscriptionRequest) validateSubscriberRef(formats strfmt.Registry) error {

	if err := validate.Required("subscriber_ref", "body", m.SubscriberRef); err != nil {
		return err
	}

	return nil
}

func (m *V3SiriProductionTimetableSubscriptionRequest) validateSubscriptionRef(formats strfmt.Registry) error {

	if err := validate.Required("subscription_ref", "body", m.SubscriptionRef); err != nil {
		return err
	}

	return nil
}

func (m *V3SiriProductionTimetableSubscriptionRequest) validateTopics(formats strfmt.Registry) error {

	if err := validate.Required("topics", "body", m.Topics); err != nil {
		return err
	}

	for i := 0; i < len(m.Topics); i++ {
		if swag.IsZero(m.Topics[i]) { // not required
			continue
		}

		if m.Topics[i] != nil {
			if err := m.Topics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("topics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("topics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v3 siri production timetable subscription request based on the context it is used
func (m *V3SiriProductionTimetableSubscriptionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTopics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3SiriProductionTimetableSubscriptionRequest) contextValidateTopics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Topics); i++ {

		if m.Topics[i] != nil {

			if swag.IsZero(m.Topics[i]) { // not required
				return nil
			}

			if err := m.Topics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("topics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("topics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3SiriProductionTimetableSubscriptionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3SiriProductionTimetableSubscriptionRequest) UnmarshalBinary(b []byte) error {
	var res V3SiriProductionTimetableSubscriptionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
