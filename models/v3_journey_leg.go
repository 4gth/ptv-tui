// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3JourneyLeg v3 journey leg
//
// swagger:model V3.JourneyLeg
type V3JourneyLeg struct {

	// alternate lines
	AlternateLines []string `json:"AlternateLines"`

	// date arrival str
	// Read Only: true
	DateArrivalStr string `json:"DateArrivalStr,omitempty"`

	// date departure str
	// Read Only: true
	DateDepartureStr string `json:"DateDepartureStr,omitempty"`

	// direction
	Direction *V3Direction `json:"Direction,omitempty"`

	// direction code
	DirectionCode string `json:"DirectionCode,omitempty"`

	// direction Id
	DirectionID string `json:"DirectionId,omitempty"`

	// direction name
	DirectionName string `json:"DirectionName,omitempty"`

	// disruptions
	Disruptions []*V3Disruption `json:"Disruptions"`

	// information
	Information []string `json:"Information"`

	// Turn by turn detailed walking instructions. Exist only when Type=Walk
	InstructionDetails []*V3LegDirection `json:"InstructionDetails"`

	// Summary walking instructions. Exist only when Type=Walk
	Instructions string `json:"Instructions,omitempty"`

	// is realtime
	IsRealtime bool `json:"IsRealtime,omitempty"`

	// line Id
	LineID string `json:"LineId,omitempty"`

	// line name
	LineName string `json:"LineName,omitempty"`

	// operated by
	OperatedBy string `json:"OperatedBy,omitempty"`

	// Array of geographic coordinates (latitude and longitude) for the approximate linear path of the journey leg. Only returned if inclPathCoords=true. May be null/empty.
	PathCoordinates []*V3JourneyLegPathCoordinate `json:"PathCoordinates"`

	// sequence
	Sequence int32 `json:"Sequence,omitempty"`

	// stop arrival
	StopArrival *V3JourneyPlannerLocation `json:"StopArrival,omitempty"`

	// stop departure
	StopDeparture *V3JourneyPlannerLocation `json:"StopDeparture,omitempty"`

	// stopping pattern
	StoppingPattern []*V3JourneyPlannerStop `json:"StoppingPattern"`

	// time arrival
	// Format: date-time
	TimeArrival strfmt.DateTime `json:"TimeArrival,omitempty"`

	// time arrival str
	// Read Only: true
	TimeArrivalStr string `json:"TimeArrivalStr,omitempty"`

	// time departure
	// Format: date-time
	TimeDeparture strfmt.DateTime `json:"TimeDeparture,omitempty"`

	// time departure str
	// Read Only: true
	TimeDepartureStr string `json:"TimeDepartureStr,omitempty"`

	// time realtime
	// Format: date-time
	TimeRealtime strfmt.DateTime `json:"TimeRealtime,omitempty"`

	// Transport type for journey leg. Support values are:
	// Train, Tram, Bus, Regional Train, NightRider, SkyBus, Regional Bus, Regional Coach, TeleBus, Interstate nonV/Line, Walk, Taxi, Drive, Ride
	Type string `json:"Type,omitempty"`

	// zones
	Zones []string `json:"Zones"`
}

// Validate validates this v3 journey leg
func (m *V3JourneyLeg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisruptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstructionDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePathCoordinates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopArrival(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopDeparture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoppingPattern(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeArrival(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeDeparture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeRealtime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3JourneyLeg) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	if m.Direction != nil {
		if err := m.Direction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Direction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Direction")
			}
			return err
		}
	}

	return nil
}

func (m *V3JourneyLeg) validateDisruptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Disruptions) { // not required
		return nil
	}

	for i := 0; i < len(m.Disruptions); i++ {
		if swag.IsZero(m.Disruptions[i]) { // not required
			continue
		}

		if m.Disruptions[i] != nil {
			if err := m.Disruptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Disruptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Disruptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3JourneyLeg) validateInstructionDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.InstructionDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.InstructionDetails); i++ {
		if swag.IsZero(m.InstructionDetails[i]) { // not required
			continue
		}

		if m.InstructionDetails[i] != nil {
			if err := m.InstructionDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("InstructionDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("InstructionDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3JourneyLeg) validatePathCoordinates(formats strfmt.Registry) error {
	if swag.IsZero(m.PathCoordinates) { // not required
		return nil
	}

	for i := 0; i < len(m.PathCoordinates); i++ {
		if swag.IsZero(m.PathCoordinates[i]) { // not required
			continue
		}

		if m.PathCoordinates[i] != nil {
			if err := m.PathCoordinates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PathCoordinates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PathCoordinates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3JourneyLeg) validateStopArrival(formats strfmt.Registry) error {
	if swag.IsZero(m.StopArrival) { // not required
		return nil
	}

	if m.StopArrival != nil {
		if err := m.StopArrival.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StopArrival")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("StopArrival")
			}
			return err
		}
	}

	return nil
}

func (m *V3JourneyLeg) validateStopDeparture(formats strfmt.Registry) error {
	if swag.IsZero(m.StopDeparture) { // not required
		return nil
	}

	if m.StopDeparture != nil {
		if err := m.StopDeparture.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StopDeparture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("StopDeparture")
			}
			return err
		}
	}

	return nil
}

func (m *V3JourneyLeg) validateStoppingPattern(formats strfmt.Registry) error {
	if swag.IsZero(m.StoppingPattern) { // not required
		return nil
	}

	for i := 0; i < len(m.StoppingPattern); i++ {
		if swag.IsZero(m.StoppingPattern[i]) { // not required
			continue
		}

		if m.StoppingPattern[i] != nil {
			if err := m.StoppingPattern[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StoppingPattern" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("StoppingPattern" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3JourneyLeg) validateTimeArrival(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeArrival) { // not required
		return nil
	}

	if err := validate.FormatOf("TimeArrival", "body", "date-time", m.TimeArrival.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3JourneyLeg) validateTimeDeparture(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeDeparture) { // not required
		return nil
	}

	if err := validate.FormatOf("TimeDeparture", "body", "date-time", m.TimeDeparture.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3JourneyLeg) validateTimeRealtime(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeRealtime) { // not required
		return nil
	}

	if err := validate.FormatOf("TimeRealtime", "body", "date-time", m.TimeRealtime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v3 journey leg based on the context it is used
func (m *V3JourneyLeg) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateArrivalStr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateDepartureStr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDirection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisruptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstructionDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePathCoordinates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStopArrival(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStopDeparture(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoppingPattern(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeArrivalStr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeDepartureStr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3JourneyLeg) contextValidateDateArrivalStr(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "DateArrivalStr", "body", string(m.DateArrivalStr)); err != nil {
		return err
	}

	return nil
}

func (m *V3JourneyLeg) contextValidateDateDepartureStr(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "DateDepartureStr", "body", string(m.DateDepartureStr)); err != nil {
		return err
	}

	return nil
}

func (m *V3JourneyLeg) contextValidateDirection(ctx context.Context, formats strfmt.Registry) error {

	if m.Direction != nil {

		if swag.IsZero(m.Direction) { // not required
			return nil
		}

		if err := m.Direction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Direction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Direction")
			}
			return err
		}
	}

	return nil
}

func (m *V3JourneyLeg) contextValidateDisruptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Disruptions); i++ {

		if m.Disruptions[i] != nil {

			if swag.IsZero(m.Disruptions[i]) { // not required
				return nil
			}

			if err := m.Disruptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Disruptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Disruptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3JourneyLeg) contextValidateInstructionDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InstructionDetails); i++ {

		if m.InstructionDetails[i] != nil {

			if swag.IsZero(m.InstructionDetails[i]) { // not required
				return nil
			}

			if err := m.InstructionDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("InstructionDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("InstructionDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3JourneyLeg) contextValidatePathCoordinates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PathCoordinates); i++ {

		if m.PathCoordinates[i] != nil {

			if swag.IsZero(m.PathCoordinates[i]) { // not required
				return nil
			}

			if err := m.PathCoordinates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PathCoordinates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PathCoordinates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3JourneyLeg) contextValidateStopArrival(ctx context.Context, formats strfmt.Registry) error {

	if m.StopArrival != nil {

		if swag.IsZero(m.StopArrival) { // not required
			return nil
		}

		if err := m.StopArrival.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StopArrival")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("StopArrival")
			}
			return err
		}
	}

	return nil
}

func (m *V3JourneyLeg) contextValidateStopDeparture(ctx context.Context, formats strfmt.Registry) error {

	if m.StopDeparture != nil {

		if swag.IsZero(m.StopDeparture) { // not required
			return nil
		}

		if err := m.StopDeparture.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StopDeparture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("StopDeparture")
			}
			return err
		}
	}

	return nil
}

func (m *V3JourneyLeg) contextValidateStoppingPattern(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StoppingPattern); i++ {

		if m.StoppingPattern[i] != nil {

			if swag.IsZero(m.StoppingPattern[i]) { // not required
				return nil
			}

			if err := m.StoppingPattern[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StoppingPattern" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("StoppingPattern" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3JourneyLeg) contextValidateTimeArrivalStr(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "TimeArrivalStr", "body", string(m.TimeArrivalStr)); err != nil {
		return err
	}

	return nil
}

func (m *V3JourneyLeg) contextValidateTimeDepartureStr(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "TimeDepartureStr", "body", string(m.TimeDepartureStr)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3JourneyLeg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3JourneyLeg) UnmarshalBinary(b []byte) error {
	var res V3JourneyLeg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
