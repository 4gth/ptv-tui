// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3StopToStopDisruption v3 stop to stop disruption
//
// swagger:model V3.StopToStopDisruption
type V3StopToStopDisruption struct {

	// Whether alternate transportation has been arranged for the area (e.g. "Will be arranged", "Has been arranged")
	AlternateTransport string `json:"alternate_transport,omitempty"`

	// The direction of the disruption (e.g. "Outbound", "Inbound", "Both")
	DirectionName string `json:"direction_name,omitempty"`

	// end
	End *V3StopBasic `json:"end,omitempty"`

	// Date and time disruption information is published, in ISO 8601 UTC format
	// Format: date-time
	PublishedOn strfmt.DateTime `json:"published_on,omitempty"`

	// Disrupted region of the route type's network (e.g. "Blakburn to Boxhill")
	Region string `json:"region,omitempty"`

	// start
	Start *V3StopBasic `json:"start,omitempty"`

	// Status of the disruption (e.g. "Current")
	Status string `json:"status,omitempty"`
}

// Validate validates this v3 stop to stop disruption
func (m *V3StopToStopDisruption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3StopToStopDisruption) validateEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.End) { // not required
		return nil
	}

	if m.End != nil {
		if err := m.End.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("end")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("end")
			}
			return err
		}
	}

	return nil
}

func (m *V3StopToStopDisruption) validatePublishedOn(formats strfmt.Registry) error {
	if swag.IsZero(m.PublishedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("published_on", "body", "date-time", m.PublishedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3StopToStopDisruption) validateStart(formats strfmt.Registry) error {
	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if m.Start != nil {
		if err := m.Start.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("start")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("start")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v3 stop to stop disruption based on the context it is used
func (m *V3StopToStopDisruption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3StopToStopDisruption) contextValidateEnd(ctx context.Context, formats strfmt.Registry) error {

	if m.End != nil {

		if swag.IsZero(m.End) { // not required
			return nil
		}

		if err := m.End.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("end")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("end")
			}
			return err
		}
	}

	return nil
}

func (m *V3StopToStopDisruption) contextValidateStart(ctx context.Context, formats strfmt.Registry) error {

	if m.Start != nil {

		if swag.IsZero(m.Start) { // not required
			return nil
		}

		if err := m.Start.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("start")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("start")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3StopToStopDisruption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3StopToStopDisruption) UnmarshalBinary(b []byte) error {
	var res V3StopToStopDisruption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
