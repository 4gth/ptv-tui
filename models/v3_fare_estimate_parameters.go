// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3FareEstimateParameters v3 fare estimate parameters
//
// swagger:model V3.FareEstimateParameters
type V3FareEstimateParameters struct {

	// is journey in free tram zone
	IsJourneyInFreeTramZone bool `json:"is_journey_in_free_tram_zone,omitempty"`

	// JourneyTouchOffUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53).
	// Format: date-time
	JourneyTouchOffUtc strfmt.DateTime `json:"journey_touch_off_utc,omitempty"`

	// JourneyTouchOnUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53).
	// Format: date-time
	JourneyTouchOnUtc strfmt.DateTime `json:"journey_touch_on_utc,omitempty"`

	// travelled route types
	TravelledRouteTypes []int32 `json:"travelled_route_types"`
}

// Validate validates this v3 fare estimate parameters
func (m *V3FareEstimateParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJourneyTouchOffUtc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJourneyTouchOnUtc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTravelledRouteTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3FareEstimateParameters) validateJourneyTouchOffUtc(formats strfmt.Registry) error {
	if swag.IsZero(m.JourneyTouchOffUtc) { // not required
		return nil
	}

	if err := validate.FormatOf("journey_touch_off_utc", "body", "date-time", m.JourneyTouchOffUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3FareEstimateParameters) validateJourneyTouchOnUtc(formats strfmt.Registry) error {
	if swag.IsZero(m.JourneyTouchOnUtc) { // not required
		return nil
	}

	if err := validate.FormatOf("journey_touch_on_utc", "body", "date-time", m.JourneyTouchOnUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

var v3FareEstimateParametersTravelledRouteTypesItemsEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3,4]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3FareEstimateParametersTravelledRouteTypesItemsEnum = append(v3FareEstimateParametersTravelledRouteTypesItemsEnum, v)
	}
}

func (m *V3FareEstimateParameters) validateTravelledRouteTypesItemsEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, v3FareEstimateParametersTravelledRouteTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V3FareEstimateParameters) validateTravelledRouteTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.TravelledRouteTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.TravelledRouteTypes); i++ {

		// value enum
		if err := m.validateTravelledRouteTypesItemsEnum("travelled_route_types"+"."+strconv.Itoa(i), "body", m.TravelledRouteTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this v3 fare estimate parameters based on context it is used
func (m *V3FareEstimateParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V3FareEstimateParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3FareEstimateParameters) UnmarshalBinary(b []byte) error {
	var res V3FareEstimateParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
