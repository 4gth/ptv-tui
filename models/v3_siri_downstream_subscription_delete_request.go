// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3SiriDownstreamSubscriptionDeleteRequest v3 siri downstream subscription delete request
//
// swagger:model V3.SiriDownstreamSubscriptionDeleteRequest
type V3SiriDownstreamSubscriptionDeleteRequest struct {

	// Siri Subscriber Ref
	// Required: true
	SubscriberRef *string `json:"subscriber_ref"`

	// Siri Subscription Reference(s) - Unique to a Subscriber Ref.
	// If `null`, then all subscriptions will be terminated for the referenced Subscriber.
	SubscriptionRef []string `json:"subscription_ref"`
}

// Validate validates this v3 siri downstream subscription delete request
func (m *V3SiriDownstreamSubscriptionDeleteRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubscriberRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3SiriDownstreamSubscriptionDeleteRequest) validateSubscriberRef(formats strfmt.Registry) error {

	if err := validate.Required("subscriber_ref", "body", m.SubscriberRef); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v3 siri downstream subscription delete request based on context it is used
func (m *V3SiriDownstreamSubscriptionDeleteRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V3SiriDownstreamSubscriptionDeleteRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3SiriDownstreamSubscriptionDeleteRequest) UnmarshalBinary(b []byte) error {
	var res V3SiriDownstreamSubscriptionDeleteRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
