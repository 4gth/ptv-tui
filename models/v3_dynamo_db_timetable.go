// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3DynamoDbTimetable v3 dynamo db timetable
//
// swagger:model V3.DynamoDbTimetable
type V3DynamoDbTimetable struct {

	// Date (in local timezone) for which this timetable is valid.
	// Format: date-time
	ApplicableDate strfmt.DateTime `json:"applicable_date,omitempty"`

	// Formated date string of applicable date
	// Read Only: true
	ApplicableLocalDate string `json:"applicable_local_date,omitempty"`

	// True if the named table has been created in DynamoDB (i.e. at least one departure record has been loaded),
	// or false if there are no records for this date and transport type.
	Exists bool `json:"exists,omitempty"`

	// Diva Mapping Version used to load Parser into DynamoDB
	ParserMappingVersion string `json:"parser_mapping_version,omitempty"`

	// Parser verison
	ParserVersion int64 `json:"parser_version,omitempty"`

	// Diva Mapping Version used to load PT into DynamoDB
	PtMappingVersion string `json:"pt_mapping_version,omitempty"`

	// PT version
	PtVersion int64 `json:"pt_version,omitempty"`

	// Name of corresponding table in DynamoDB.
	TableName string `json:"table_name,omitempty"`

	// A.k.a. Transport Mode (e.g. Train, Tram, Bus, V/Line, Nightrider)
	// Enum: [0,1,2,3,4]
	TransportType int32 `json:"transport_type,omitempty"`
}

// Validate validates this v3 dynamo db timetable
func (m *V3DynamoDbTimetable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicableDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3DynamoDbTimetable) validateApplicableDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicableDate) { // not required
		return nil
	}

	if err := validate.FormatOf("applicable_date", "body", "date-time", m.ApplicableDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var v3DynamoDbTimetableTypeTransportTypePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3,4]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3DynamoDbTimetableTypeTransportTypePropEnum = append(v3DynamoDbTimetableTypeTransportTypePropEnum, v)
	}
}

// prop value enum
func (m *V3DynamoDbTimetable) validateTransportTypeEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, v3DynamoDbTimetableTypeTransportTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V3DynamoDbTimetable) validateTransportType(formats strfmt.Registry) error {
	if swag.IsZero(m.TransportType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransportTypeEnum("transport_type", "body", m.TransportType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v3 dynamo db timetable based on the context it is used
func (m *V3DynamoDbTimetable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicableLocalDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3DynamoDbTimetable) contextValidateApplicableLocalDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "applicable_local_date", "body", string(m.ApplicableLocalDate)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3DynamoDbTimetable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3DynamoDbTimetable) UnmarshalBinary(b []byte) error {
	var res V3DynamoDbTimetable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
