// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3Interchange When two runs connect
//
// swagger:model V3.Interchange
type V3Interchange struct {

	// The run that a vehicle will become
	Distributor *V3InterchangeRun `json:"distributor,omitempty"`

	// The run that a vehicle was previously on
	Feeder *V3InterchangeRun `json:"feeder,omitempty"`
}

// Validate validates this v3 interchange
func (m *V3Interchange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDistributor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3Interchange) validateDistributor(formats strfmt.Registry) error {
	if swag.IsZero(m.Distributor) { // not required
		return nil
	}

	if m.Distributor != nil {
		if err := m.Distributor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("distributor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("distributor")
			}
			return err
		}
	}

	return nil
}

func (m *V3Interchange) validateFeeder(formats strfmt.Registry) error {
	if swag.IsZero(m.Feeder) { // not required
		return nil
	}

	if m.Feeder != nil {
		if err := m.Feeder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("feeder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("feeder")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v3 interchange based on the context it is used
func (m *V3Interchange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDistributor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3Interchange) contextValidateDistributor(ctx context.Context, formats strfmt.Registry) error {

	if m.Distributor != nil {

		if swag.IsZero(m.Distributor) { // not required
			return nil
		}

		if err := m.Distributor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("distributor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("distributor")
			}
			return err
		}
	}

	return nil
}

func (m *V3Interchange) contextValidateFeeder(ctx context.Context, formats strfmt.Registry) error {

	if m.Feeder != nil {

		if swag.IsZero(m.Feeder) { // not required
			return nil
		}

		if err := m.Feeder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("feeder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("feeder")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3Interchange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3Interchange) UnmarshalBinary(b []byte) error {
	var res V3Interchange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
