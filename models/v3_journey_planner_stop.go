// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3JourneyPlannerStop v3 journey planner stop
//
// swagger:model V3.JourneyPlannerStop
type V3JourneyPlannerStop struct {

	// is realtime
	IsRealtime bool `json:"IsRealtime,omitempty"`

	// location
	Location *V3JourneyPlannerLocation `json:"Location,omitempty"`

	// time realtime utc
	// Format: date-time
	TimeRealtimeUtc strfmt.DateTime `json:"TimeRealtimeUtc,omitempty"`

	// time str
	// Read Only: true
	TimeStr string `json:"TimeStr,omitempty"`

	// time timetable utc
	// Format: date-time
	TimeTimetableUtc strfmt.DateTime `json:"TimeTimetableUtc,omitempty"`
}

// Validate validates this v3 journey planner stop
func (m *V3JourneyPlannerStop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeRealtimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeTimetableUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3JourneyPlannerStop) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Location")
			}
			return err
		}
	}

	return nil
}

func (m *V3JourneyPlannerStop) validateTimeRealtimeUtc(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeRealtimeUtc) { // not required
		return nil
	}

	if err := validate.FormatOf("TimeRealtimeUtc", "body", "date-time", m.TimeRealtimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3JourneyPlannerStop) validateTimeTimetableUtc(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeTimetableUtc) { // not required
		return nil
	}

	if err := validate.FormatOf("TimeTimetableUtc", "body", "date-time", m.TimeTimetableUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v3 journey planner stop based on the context it is used
func (m *V3JourneyPlannerStop) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeStr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3JourneyPlannerStop) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Location")
			}
			return err
		}
	}

	return nil
}

func (m *V3JourneyPlannerStop) contextValidateTimeStr(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "TimeStr", "body", string(m.TimeStr)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3JourneyPlannerStop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3JourneyPlannerStop) UnmarshalBinary(b []byte) error {
	var res V3JourneyPlannerStop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
