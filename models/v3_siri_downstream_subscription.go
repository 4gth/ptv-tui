// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3SiriDownstreamSubscription v3 siri downstream subscription
//
// swagger:model V3.SiriDownstreamSubscription
type V3SiriDownstreamSubscription struct {

	// consumer address
	ConsumerAddress string `json:"consumer_address,omitempty"`

	// initial termination time
	// Format: date-time
	InitialTerminationTime strfmt.DateTime `json:"initial_termination_time,omitempty"`

	// message type
	// Enum: [0,1]
	MessageType int32 `json:"message_type,omitempty"`

	// preview interval
	PreviewInterval string `json:"preview_interval,omitempty"`

	// siri format
	// Enum: [0,1]
	SiriFormat int32 `json:"siri_format,omitempty"`

	// siri version
	// Pattern: 1.3|2.0
	SiriVersion string `json:"siri_version,omitempty"`

	// subscriber ref
	SubscriberRef string `json:"subscriber_ref,omitempty"`

	// subscription ref
	SubscriptionRef string `json:"subscription_ref,omitempty"`

	// topics
	Topics []*V3SiriDownstreamSubscriptionTopic `json:"topics"`

	// validity period end
	// Format: date-time
	ValidityPeriodEnd strfmt.DateTime `json:"validity_period_end,omitempty"`

	// validity period start
	// Format: date-time
	ValidityPeriodStart strfmt.DateTime `json:"validity_period_start,omitempty"`
}

// Validate validates this v3 siri downstream subscription
func (m *V3SiriDownstreamSubscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInitialTerminationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiriFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiriVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidityPeriodEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidityPeriodStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3SiriDownstreamSubscription) validateInitialTerminationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.InitialTerminationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("initial_termination_time", "body", "date-time", m.InitialTerminationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var v3SiriDownstreamSubscriptionTypeMessageTypePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3SiriDownstreamSubscriptionTypeMessageTypePropEnum = append(v3SiriDownstreamSubscriptionTypeMessageTypePropEnum, v)
	}
}

// prop value enum
func (m *V3SiriDownstreamSubscription) validateMessageTypeEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, v3SiriDownstreamSubscriptionTypeMessageTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V3SiriDownstreamSubscription) validateMessageType(formats strfmt.Registry) error {
	if swag.IsZero(m.MessageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMessageTypeEnum("message_type", "body", m.MessageType); err != nil {
		return err
	}

	return nil
}

var v3SiriDownstreamSubscriptionTypeSiriFormatPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3SiriDownstreamSubscriptionTypeSiriFormatPropEnum = append(v3SiriDownstreamSubscriptionTypeSiriFormatPropEnum, v)
	}
}

// prop value enum
func (m *V3SiriDownstreamSubscription) validateSiriFormatEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, v3SiriDownstreamSubscriptionTypeSiriFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V3SiriDownstreamSubscription) validateSiriFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.SiriFormat) { // not required
		return nil
	}

	// value enum
	if err := m.validateSiriFormatEnum("siri_format", "body", m.SiriFormat); err != nil {
		return err
	}

	return nil
}

func (m *V3SiriDownstreamSubscription) validateSiriVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.SiriVersion) { // not required
		return nil
	}

	if err := validate.Pattern("siri_version", "body", m.SiriVersion, `1.3|2.0`); err != nil {
		return err
	}

	return nil
}

func (m *V3SiriDownstreamSubscription) validateTopics(formats strfmt.Registry) error {
	if swag.IsZero(m.Topics) { // not required
		return nil
	}

	for i := 0; i < len(m.Topics); i++ {
		if swag.IsZero(m.Topics[i]) { // not required
			continue
		}

		if m.Topics[i] != nil {
			if err := m.Topics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("topics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("topics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3SiriDownstreamSubscription) validateValidityPeriodEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidityPeriodEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("validity_period_end", "body", "date-time", m.ValidityPeriodEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3SiriDownstreamSubscription) validateValidityPeriodStart(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidityPeriodStart) { // not required
		return nil
	}

	if err := validate.FormatOf("validity_period_start", "body", "date-time", m.ValidityPeriodStart.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v3 siri downstream subscription based on the context it is used
func (m *V3SiriDownstreamSubscription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTopics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3SiriDownstreamSubscription) contextValidateTopics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Topics); i++ {

		if m.Topics[i] != nil {

			if swag.IsZero(m.Topics[i]) { // not required
				return nil
			}

			if err := m.Topics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("topics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("topics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3SiriDownstreamSubscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3SiriDownstreamSubscription) UnmarshalBinary(b []byte) error {
	var res V3SiriDownstreamSubscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
