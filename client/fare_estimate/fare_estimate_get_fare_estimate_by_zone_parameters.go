// Code generated by go-swagger; DO NOT EDIT.

package fare_estimate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFareEstimateGetFareEstimateByZoneParams creates a new FareEstimateGetFareEstimateByZoneParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFareEstimateGetFareEstimateByZoneParams() *FareEstimateGetFareEstimateByZoneParams {
	return &FareEstimateGetFareEstimateByZoneParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFareEstimateGetFareEstimateByZoneParamsWithTimeout creates a new FareEstimateGetFareEstimateByZoneParams object
// with the ability to set a timeout on a request.
func NewFareEstimateGetFareEstimateByZoneParamsWithTimeout(timeout time.Duration) *FareEstimateGetFareEstimateByZoneParams {
	return &FareEstimateGetFareEstimateByZoneParams{
		timeout: timeout,
	}
}

// NewFareEstimateGetFareEstimateByZoneParamsWithContext creates a new FareEstimateGetFareEstimateByZoneParams object
// with the ability to set a context for a request.
func NewFareEstimateGetFareEstimateByZoneParamsWithContext(ctx context.Context) *FareEstimateGetFareEstimateByZoneParams {
	return &FareEstimateGetFareEstimateByZoneParams{
		Context: ctx,
	}
}

// NewFareEstimateGetFareEstimateByZoneParamsWithHTTPClient creates a new FareEstimateGetFareEstimateByZoneParams object
// with the ability to set a custom HTTPClient for a request.
func NewFareEstimateGetFareEstimateByZoneParamsWithHTTPClient(client *http.Client) *FareEstimateGetFareEstimateByZoneParams {
	return &FareEstimateGetFareEstimateByZoneParams{
		HTTPClient: client,
	}
}

/*
FareEstimateGetFareEstimateByZoneParams contains all the parameters to send to the API endpoint

	for the fare estimate get fare estimate by zone operation.

	Typically these are written to a http.Request.
*/
type FareEstimateGetFareEstimateByZoneParams struct {

	/* Devid.

	   Your developer id
	*/
	Devid *string

	// IsJourneyInFreeTramZone.
	IsJourneyInFreeTramZone *bool

	/* JourneyTouchOffUtc.

	   JourneyTouchOffUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53).

	   Format: date-time
	*/
	JourneyTouchOffUtc *strfmt.DateTime

	/* JourneyTouchOnUtc.

	   JourneyTouchOnUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53).

	   Format: date-time
	*/
	JourneyTouchOnUtc *strfmt.DateTime

	/* MaxZone.

	   Maximum Zone travelled through id. 6

	   Format: int32
	*/
	MaxZone int32

	/* MinZone.

	   Minimum Zone travelled through ie. 1

	   Format: int32
	*/
	MinZone int32

	/* Signature.

	   Authentication signature for request
	*/
	Signature *string

	/* Token.

	   Please ignore
	*/
	Token *string

	// TravelledRouteTypes.
	TravelledRouteTypes []int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the fare estimate get fare estimate by zone params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FareEstimateGetFareEstimateByZoneParams) WithDefaults() *FareEstimateGetFareEstimateByZoneParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the fare estimate get fare estimate by zone params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FareEstimateGetFareEstimateByZoneParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) WithTimeout(timeout time.Duration) *FareEstimateGetFareEstimateByZoneParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) WithContext(ctx context.Context) *FareEstimateGetFareEstimateByZoneParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) WithHTTPClient(client *http.Client) *FareEstimateGetFareEstimateByZoneParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevid adds the devid to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) WithDevid(devid *string) *FareEstimateGetFareEstimateByZoneParams {
	o.SetDevid(devid)
	return o
}

// SetDevid adds the devid to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) SetDevid(devid *string) {
	o.Devid = devid
}

// WithIsJourneyInFreeTramZone adds the isJourneyInFreeTramZone to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) WithIsJourneyInFreeTramZone(isJourneyInFreeTramZone *bool) *FareEstimateGetFareEstimateByZoneParams {
	o.SetIsJourneyInFreeTramZone(isJourneyInFreeTramZone)
	return o
}

// SetIsJourneyInFreeTramZone adds the isJourneyInFreeTramZone to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) SetIsJourneyInFreeTramZone(isJourneyInFreeTramZone *bool) {
	o.IsJourneyInFreeTramZone = isJourneyInFreeTramZone
}

// WithJourneyTouchOffUtc adds the journeyTouchOffUtc to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) WithJourneyTouchOffUtc(journeyTouchOffUtc *strfmt.DateTime) *FareEstimateGetFareEstimateByZoneParams {
	o.SetJourneyTouchOffUtc(journeyTouchOffUtc)
	return o
}

// SetJourneyTouchOffUtc adds the journeyTouchOffUtc to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) SetJourneyTouchOffUtc(journeyTouchOffUtc *strfmt.DateTime) {
	o.JourneyTouchOffUtc = journeyTouchOffUtc
}

// WithJourneyTouchOnUtc adds the journeyTouchOnUtc to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) WithJourneyTouchOnUtc(journeyTouchOnUtc *strfmt.DateTime) *FareEstimateGetFareEstimateByZoneParams {
	o.SetJourneyTouchOnUtc(journeyTouchOnUtc)
	return o
}

// SetJourneyTouchOnUtc adds the journeyTouchOnUtc to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) SetJourneyTouchOnUtc(journeyTouchOnUtc *strfmt.DateTime) {
	o.JourneyTouchOnUtc = journeyTouchOnUtc
}

// WithMaxZone adds the maxZone to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) WithMaxZone(maxZone int32) *FareEstimateGetFareEstimateByZoneParams {
	o.SetMaxZone(maxZone)
	return o
}

// SetMaxZone adds the maxZone to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) SetMaxZone(maxZone int32) {
	o.MaxZone = maxZone
}

// WithMinZone adds the minZone to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) WithMinZone(minZone int32) *FareEstimateGetFareEstimateByZoneParams {
	o.SetMinZone(minZone)
	return o
}

// SetMinZone adds the minZone to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) SetMinZone(minZone int32) {
	o.MinZone = minZone
}

// WithSignature adds the signature to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) WithSignature(signature *string) *FareEstimateGetFareEstimateByZoneParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) SetSignature(signature *string) {
	o.Signature = signature
}

// WithToken adds the token to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) WithToken(token *string) *FareEstimateGetFareEstimateByZoneParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) SetToken(token *string) {
	o.Token = token
}

// WithTravelledRouteTypes adds the travelledRouteTypes to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) WithTravelledRouteTypes(travelledRouteTypes []int32) *FareEstimateGetFareEstimateByZoneParams {
	o.SetTravelledRouteTypes(travelledRouteTypes)
	return o
}

// SetTravelledRouteTypes adds the travelledRouteTypes to the fare estimate get fare estimate by zone params
func (o *FareEstimateGetFareEstimateByZoneParams) SetTravelledRouteTypes(travelledRouteTypes []int32) {
	o.TravelledRouteTypes = travelledRouteTypes
}

// WriteToRequest writes these params to a swagger request
func (o *FareEstimateGetFareEstimateByZoneParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Devid != nil {

		// query param devid
		var qrDevid string

		if o.Devid != nil {
			qrDevid = *o.Devid
		}
		qDevid := qrDevid
		if qDevid != "" {

			if err := r.SetQueryParam("devid", qDevid); err != nil {
				return err
			}
		}
	}

	if o.IsJourneyInFreeTramZone != nil {

		// query param is_journey_in_free_tram_zone
		var qrIsJourneyInFreeTramZone bool

		if o.IsJourneyInFreeTramZone != nil {
			qrIsJourneyInFreeTramZone = *o.IsJourneyInFreeTramZone
		}
		qIsJourneyInFreeTramZone := swag.FormatBool(qrIsJourneyInFreeTramZone)
		if qIsJourneyInFreeTramZone != "" {

			if err := r.SetQueryParam("is_journey_in_free_tram_zone", qIsJourneyInFreeTramZone); err != nil {
				return err
			}
		}
	}

	if o.JourneyTouchOffUtc != nil {

		// query param journey_touch_off_utc
		var qrJourneyTouchOffUtc strfmt.DateTime

		if o.JourneyTouchOffUtc != nil {
			qrJourneyTouchOffUtc = *o.JourneyTouchOffUtc
		}
		qJourneyTouchOffUtc := qrJourneyTouchOffUtc.String()
		if qJourneyTouchOffUtc != "" {

			if err := r.SetQueryParam("journey_touch_off_utc", qJourneyTouchOffUtc); err != nil {
				return err
			}
		}
	}

	if o.JourneyTouchOnUtc != nil {

		// query param journey_touch_on_utc
		var qrJourneyTouchOnUtc strfmt.DateTime

		if o.JourneyTouchOnUtc != nil {
			qrJourneyTouchOnUtc = *o.JourneyTouchOnUtc
		}
		qJourneyTouchOnUtc := qrJourneyTouchOnUtc.String()
		if qJourneyTouchOnUtc != "" {

			if err := r.SetQueryParam("journey_touch_on_utc", qJourneyTouchOnUtc); err != nil {
				return err
			}
		}
	}

	// path param maxZone
	if err := r.SetPathParam("maxZone", swag.FormatInt32(o.MaxZone)); err != nil {
		return err
	}

	// path param minZone
	if err := r.SetPathParam("minZone", swag.FormatInt32(o.MinZone)); err != nil {
		return err
	}

	if o.Signature != nil {

		// query param signature
		var qrSignature string

		if o.Signature != nil {
			qrSignature = *o.Signature
		}
		qSignature := qrSignature
		if qSignature != "" {

			if err := r.SetQueryParam("signature", qSignature); err != nil {
				return err
			}
		}
	}

	if o.Token != nil {

		// query param token
		var qrToken string

		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {

			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}
	}

	if o.TravelledRouteTypes != nil {

		// binding items for travelled_route_types
		joinedTravelledRouteTypes := o.bindParamTravelledRouteTypes(reg)

		// query array param travelled_route_types
		if err := r.SetQueryParam("travelled_route_types", joinedTravelledRouteTypes...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFareEstimateGetFareEstimateByZone binds the parameter travelled_route_types
func (o *FareEstimateGetFareEstimateByZoneParams) bindParamTravelledRouteTypes(formats strfmt.Registry) []string {
	travelledRouteTypesIR := o.TravelledRouteTypes

	var travelledRouteTypesIC []string
	for _, travelledRouteTypesIIR := range travelledRouteTypesIR { // explode []int32

		travelledRouteTypesIIV := swag.FormatInt32(travelledRouteTypesIIR) // int32 as string
		travelledRouteTypesIC = append(travelledRouteTypesIC, travelledRouteTypesIIV)
	}

	// items.CollectionFormat: "multi"
	travelledRouteTypesIS := swag.JoinByFormat(travelledRouteTypesIC, "multi")

	return travelledRouteTypesIS
}
