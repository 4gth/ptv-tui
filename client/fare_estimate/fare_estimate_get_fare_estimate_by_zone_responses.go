// Code generated by go-swagger; DO NOT EDIT.

package fare_estimate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// FareEstimateGetFareEstimateByZoneReader is a Reader for the FareEstimateGetFareEstimateByZone structure.
type FareEstimateGetFareEstimateByZoneReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FareEstimateGetFareEstimateByZoneReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFareEstimateGetFareEstimateByZoneOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFareEstimateGetFareEstimateByZoneBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFareEstimateGetFareEstimateByZoneForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/fare_estimate/min_zone/{minZone}/max_zone/{maxZone}] FareEstimate_GetFareEstimateByZone", response, response.Code())
	}
}

// NewFareEstimateGetFareEstimateByZoneOK creates a FareEstimateGetFareEstimateByZoneOK with default headers values
func NewFareEstimateGetFareEstimateByZoneOK() *FareEstimateGetFareEstimateByZoneOK {
	return &FareEstimateGetFareEstimateByZoneOK{}
}

/*
FareEstimateGetFareEstimateByZoneOK describes a response with status code 200, with default header values.

Resultant set fare estimates
*/
type FareEstimateGetFareEstimateByZoneOK struct {
	Payload *models.V3FareEstimateResponse
}

// IsSuccess returns true when this fare estimate get fare estimate by zone o k response has a 2xx status code
func (o *FareEstimateGetFareEstimateByZoneOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this fare estimate get fare estimate by zone o k response has a 3xx status code
func (o *FareEstimateGetFareEstimateByZoneOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fare estimate get fare estimate by zone o k response has a 4xx status code
func (o *FareEstimateGetFareEstimateByZoneOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this fare estimate get fare estimate by zone o k response has a 5xx status code
func (o *FareEstimateGetFareEstimateByZoneOK) IsServerError() bool {
	return false
}

// IsCode returns true when this fare estimate get fare estimate by zone o k response a status code equal to that given
func (o *FareEstimateGetFareEstimateByZoneOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the fare estimate get fare estimate by zone o k response
func (o *FareEstimateGetFareEstimateByZoneOK) Code() int {
	return 200
}

func (o *FareEstimateGetFareEstimateByZoneOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/fare_estimate/min_zone/{minZone}/max_zone/{maxZone}][%d] fareEstimateGetFareEstimateByZoneOK %s", 200, payload)
}

func (o *FareEstimateGetFareEstimateByZoneOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/fare_estimate/min_zone/{minZone}/max_zone/{maxZone}][%d] fareEstimateGetFareEstimateByZoneOK %s", 200, payload)
}

func (o *FareEstimateGetFareEstimateByZoneOK) GetPayload() *models.V3FareEstimateResponse {
	return o.Payload
}

func (o *FareEstimateGetFareEstimateByZoneOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3FareEstimateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFareEstimateGetFareEstimateByZoneBadRequest creates a FareEstimateGetFareEstimateByZoneBadRequest with default headers values
func NewFareEstimateGetFareEstimateByZoneBadRequest() *FareEstimateGetFareEstimateByZoneBadRequest {
	return &FareEstimateGetFareEstimateByZoneBadRequest{}
}

/*
FareEstimateGetFareEstimateByZoneBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type FareEstimateGetFareEstimateByZoneBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this fare estimate get fare estimate by zone bad request response has a 2xx status code
func (o *FareEstimateGetFareEstimateByZoneBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this fare estimate get fare estimate by zone bad request response has a 3xx status code
func (o *FareEstimateGetFareEstimateByZoneBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fare estimate get fare estimate by zone bad request response has a 4xx status code
func (o *FareEstimateGetFareEstimateByZoneBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this fare estimate get fare estimate by zone bad request response has a 5xx status code
func (o *FareEstimateGetFareEstimateByZoneBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this fare estimate get fare estimate by zone bad request response a status code equal to that given
func (o *FareEstimateGetFareEstimateByZoneBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the fare estimate get fare estimate by zone bad request response
func (o *FareEstimateGetFareEstimateByZoneBadRequest) Code() int {
	return 400
}

func (o *FareEstimateGetFareEstimateByZoneBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/fare_estimate/min_zone/{minZone}/max_zone/{maxZone}][%d] fareEstimateGetFareEstimateByZoneBadRequest %s", 400, payload)
}

func (o *FareEstimateGetFareEstimateByZoneBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/fare_estimate/min_zone/{minZone}/max_zone/{maxZone}][%d] fareEstimateGetFareEstimateByZoneBadRequest %s", 400, payload)
}

func (o *FareEstimateGetFareEstimateByZoneBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *FareEstimateGetFareEstimateByZoneBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFareEstimateGetFareEstimateByZoneForbidden creates a FareEstimateGetFareEstimateByZoneForbidden with default headers values
func NewFareEstimateGetFareEstimateByZoneForbidden() *FareEstimateGetFareEstimateByZoneForbidden {
	return &FareEstimateGetFareEstimateByZoneForbidden{}
}

/*
FareEstimateGetFareEstimateByZoneForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type FareEstimateGetFareEstimateByZoneForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this fare estimate get fare estimate by zone forbidden response has a 2xx status code
func (o *FareEstimateGetFareEstimateByZoneForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this fare estimate get fare estimate by zone forbidden response has a 3xx status code
func (o *FareEstimateGetFareEstimateByZoneForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fare estimate get fare estimate by zone forbidden response has a 4xx status code
func (o *FareEstimateGetFareEstimateByZoneForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this fare estimate get fare estimate by zone forbidden response has a 5xx status code
func (o *FareEstimateGetFareEstimateByZoneForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this fare estimate get fare estimate by zone forbidden response a status code equal to that given
func (o *FareEstimateGetFareEstimateByZoneForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the fare estimate get fare estimate by zone forbidden response
func (o *FareEstimateGetFareEstimateByZoneForbidden) Code() int {
	return 403
}

func (o *FareEstimateGetFareEstimateByZoneForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/fare_estimate/min_zone/{minZone}/max_zone/{maxZone}][%d] fareEstimateGetFareEstimateByZoneForbidden %s", 403, payload)
}

func (o *FareEstimateGetFareEstimateByZoneForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/fare_estimate/min_zone/{minZone}/max_zone/{maxZone}][%d] fareEstimateGetFareEstimateByZoneForbidden %s", 403, payload)
}

func (o *FareEstimateGetFareEstimateByZoneForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *FareEstimateGetFareEstimateByZoneForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
