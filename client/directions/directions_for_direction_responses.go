// Code generated by go-swagger; DO NOT EDIT.

package directions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// DirectionsForDirectionReader is a Reader for the DirectionsForDirection structure.
type DirectionsForDirectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DirectionsForDirectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDirectionsForDirectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDirectionsForDirectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDirectionsForDirectionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/directions/{direction_id}] Directions_ForDirection", response, response.Code())
	}
}

// NewDirectionsForDirectionOK creates a DirectionsForDirectionOK with default headers values
func NewDirectionsForDirectionOK() *DirectionsForDirectionOK {
	return &DirectionsForDirectionOK{}
}

/*
DirectionsForDirectionOK describes a response with status code 200, with default header values.

All routes that travel in the specified direction.
*/
type DirectionsForDirectionOK struct {
	Payload *models.V3DirectionsResponse
}

// IsSuccess returns true when this directions for direction o k response has a 2xx status code
func (o *DirectionsForDirectionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this directions for direction o k response has a 3xx status code
func (o *DirectionsForDirectionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this directions for direction o k response has a 4xx status code
func (o *DirectionsForDirectionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this directions for direction o k response has a 5xx status code
func (o *DirectionsForDirectionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this directions for direction o k response a status code equal to that given
func (o *DirectionsForDirectionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the directions for direction o k response
func (o *DirectionsForDirectionOK) Code() int {
	return 200
}

func (o *DirectionsForDirectionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/directions/{direction_id}][%d] directionsForDirectionOK %s", 200, payload)
}

func (o *DirectionsForDirectionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/directions/{direction_id}][%d] directionsForDirectionOK %s", 200, payload)
}

func (o *DirectionsForDirectionOK) GetPayload() *models.V3DirectionsResponse {
	return o.Payload
}

func (o *DirectionsForDirectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3DirectionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectionsForDirectionBadRequest creates a DirectionsForDirectionBadRequest with default headers values
func NewDirectionsForDirectionBadRequest() *DirectionsForDirectionBadRequest {
	return &DirectionsForDirectionBadRequest{}
}

/*
DirectionsForDirectionBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type DirectionsForDirectionBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this directions for direction bad request response has a 2xx status code
func (o *DirectionsForDirectionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this directions for direction bad request response has a 3xx status code
func (o *DirectionsForDirectionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this directions for direction bad request response has a 4xx status code
func (o *DirectionsForDirectionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this directions for direction bad request response has a 5xx status code
func (o *DirectionsForDirectionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this directions for direction bad request response a status code equal to that given
func (o *DirectionsForDirectionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the directions for direction bad request response
func (o *DirectionsForDirectionBadRequest) Code() int {
	return 400
}

func (o *DirectionsForDirectionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/directions/{direction_id}][%d] directionsForDirectionBadRequest %s", 400, payload)
}

func (o *DirectionsForDirectionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/directions/{direction_id}][%d] directionsForDirectionBadRequest %s", 400, payload)
}

func (o *DirectionsForDirectionBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DirectionsForDirectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectionsForDirectionForbidden creates a DirectionsForDirectionForbidden with default headers values
func NewDirectionsForDirectionForbidden() *DirectionsForDirectionForbidden {
	return &DirectionsForDirectionForbidden{}
}

/*
DirectionsForDirectionForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type DirectionsForDirectionForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this directions for direction forbidden response has a 2xx status code
func (o *DirectionsForDirectionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this directions for direction forbidden response has a 3xx status code
func (o *DirectionsForDirectionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this directions for direction forbidden response has a 4xx status code
func (o *DirectionsForDirectionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this directions for direction forbidden response has a 5xx status code
func (o *DirectionsForDirectionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this directions for direction forbidden response a status code equal to that given
func (o *DirectionsForDirectionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the directions for direction forbidden response
func (o *DirectionsForDirectionForbidden) Code() int {
	return 403
}

func (o *DirectionsForDirectionForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/directions/{direction_id}][%d] directionsForDirectionForbidden %s", 403, payload)
}

func (o *DirectionsForDirectionForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/directions/{direction_id}][%d] directionsForDirectionForbidden %s", 403, payload)
}

func (o *DirectionsForDirectionForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DirectionsForDirectionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
