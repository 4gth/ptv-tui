// Code generated by go-swagger; DO NOT EDIT.

package directions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// DirectionsForRouteReader is a Reader for the DirectionsForRoute structure.
type DirectionsForRouteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DirectionsForRouteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDirectionsForRouteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDirectionsForRouteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDirectionsForRouteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/directions/route/{route_id}] Directions_ForRoute", response, response.Code())
	}
}

// NewDirectionsForRouteOK creates a DirectionsForRouteOK with default headers values
func NewDirectionsForRouteOK() *DirectionsForRouteOK {
	return &DirectionsForRouteOK{}
}

/*
DirectionsForRouteOK describes a response with status code 200, with default header values.

The directions that a specified route travels in.
*/
type DirectionsForRouteOK struct {
	Payload *models.V3DirectionsResponse
}

// IsSuccess returns true when this directions for route o k response has a 2xx status code
func (o *DirectionsForRouteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this directions for route o k response has a 3xx status code
func (o *DirectionsForRouteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this directions for route o k response has a 4xx status code
func (o *DirectionsForRouteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this directions for route o k response has a 5xx status code
func (o *DirectionsForRouteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this directions for route o k response a status code equal to that given
func (o *DirectionsForRouteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the directions for route o k response
func (o *DirectionsForRouteOK) Code() int {
	return 200
}

func (o *DirectionsForRouteOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/directions/route/{route_id}][%d] directionsForRouteOK %s", 200, payload)
}

func (o *DirectionsForRouteOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/directions/route/{route_id}][%d] directionsForRouteOK %s", 200, payload)
}

func (o *DirectionsForRouteOK) GetPayload() *models.V3DirectionsResponse {
	return o.Payload
}

func (o *DirectionsForRouteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3DirectionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectionsForRouteBadRequest creates a DirectionsForRouteBadRequest with default headers values
func NewDirectionsForRouteBadRequest() *DirectionsForRouteBadRequest {
	return &DirectionsForRouteBadRequest{}
}

/*
DirectionsForRouteBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type DirectionsForRouteBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this directions for route bad request response has a 2xx status code
func (o *DirectionsForRouteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this directions for route bad request response has a 3xx status code
func (o *DirectionsForRouteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this directions for route bad request response has a 4xx status code
func (o *DirectionsForRouteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this directions for route bad request response has a 5xx status code
func (o *DirectionsForRouteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this directions for route bad request response a status code equal to that given
func (o *DirectionsForRouteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the directions for route bad request response
func (o *DirectionsForRouteBadRequest) Code() int {
	return 400
}

func (o *DirectionsForRouteBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/directions/route/{route_id}][%d] directionsForRouteBadRequest %s", 400, payload)
}

func (o *DirectionsForRouteBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/directions/route/{route_id}][%d] directionsForRouteBadRequest %s", 400, payload)
}

func (o *DirectionsForRouteBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DirectionsForRouteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectionsForRouteForbidden creates a DirectionsForRouteForbidden with default headers values
func NewDirectionsForRouteForbidden() *DirectionsForRouteForbidden {
	return &DirectionsForRouteForbidden{}
}

/*
DirectionsForRouteForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type DirectionsForRouteForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this directions for route forbidden response has a 2xx status code
func (o *DirectionsForRouteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this directions for route forbidden response has a 3xx status code
func (o *DirectionsForRouteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this directions for route forbidden response has a 4xx status code
func (o *DirectionsForRouteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this directions for route forbidden response has a 5xx status code
func (o *DirectionsForRouteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this directions for route forbidden response a status code equal to that given
func (o *DirectionsForRouteForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the directions for route forbidden response
func (o *DirectionsForRouteForbidden) Code() int {
	return 403
}

func (o *DirectionsForRouteForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/directions/route/{route_id}][%d] directionsForRouteForbidden %s", 403, payload)
}

func (o *DirectionsForRouteForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/directions/route/{route_id}][%d] directionsForRouteForbidden %s", 403, payload)
}

func (o *DirectionsForRouteForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DirectionsForRouteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
