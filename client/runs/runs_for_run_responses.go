// Code generated by go-swagger; DO NOT EDIT.

package runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// RunsForRunReader is a Reader for the RunsForRun structure.
type RunsForRunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunsForRunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunsForRunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRunsForRunBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRunsForRunForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/runs/{run_ref}] Runs_ForRun", response, response.Code())
	}
}

// NewRunsForRunOK creates a RunsForRunOK with default headers values
func NewRunsForRunOK() *RunsForRunOK {
	return &RunsForRunOK{}
}

/*
RunsForRunOK describes a response with status code 200, with default header values.

All trip/service run details for the specified run_ref.
*/
type RunsForRunOK struct {
	Payload *models.V3RunsResponse
}

// IsSuccess returns true when this runs for run o k response has a 2xx status code
func (o *RunsForRunOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this runs for run o k response has a 3xx status code
func (o *RunsForRunOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this runs for run o k response has a 4xx status code
func (o *RunsForRunOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this runs for run o k response has a 5xx status code
func (o *RunsForRunOK) IsServerError() bool {
	return false
}

// IsCode returns true when this runs for run o k response a status code equal to that given
func (o *RunsForRunOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the runs for run o k response
func (o *RunsForRunOK) Code() int {
	return 200
}

func (o *RunsForRunOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/{run_ref}][%d] runsForRunOK %s", 200, payload)
}

func (o *RunsForRunOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/{run_ref}][%d] runsForRunOK %s", 200, payload)
}

func (o *RunsForRunOK) GetPayload() *models.V3RunsResponse {
	return o.Payload
}

func (o *RunsForRunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3RunsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsForRunBadRequest creates a RunsForRunBadRequest with default headers values
func NewRunsForRunBadRequest() *RunsForRunBadRequest {
	return &RunsForRunBadRequest{}
}

/*
RunsForRunBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type RunsForRunBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this runs for run bad request response has a 2xx status code
func (o *RunsForRunBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this runs for run bad request response has a 3xx status code
func (o *RunsForRunBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this runs for run bad request response has a 4xx status code
func (o *RunsForRunBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this runs for run bad request response has a 5xx status code
func (o *RunsForRunBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this runs for run bad request response a status code equal to that given
func (o *RunsForRunBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the runs for run bad request response
func (o *RunsForRunBadRequest) Code() int {
	return 400
}

func (o *RunsForRunBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/{run_ref}][%d] runsForRunBadRequest %s", 400, payload)
}

func (o *RunsForRunBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/{run_ref}][%d] runsForRunBadRequest %s", 400, payload)
}

func (o *RunsForRunBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *RunsForRunBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsForRunForbidden creates a RunsForRunForbidden with default headers values
func NewRunsForRunForbidden() *RunsForRunForbidden {
	return &RunsForRunForbidden{}
}

/*
RunsForRunForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type RunsForRunForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this runs for run forbidden response has a 2xx status code
func (o *RunsForRunForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this runs for run forbidden response has a 3xx status code
func (o *RunsForRunForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this runs for run forbidden response has a 4xx status code
func (o *RunsForRunForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this runs for run forbidden response has a 5xx status code
func (o *RunsForRunForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this runs for run forbidden response a status code equal to that given
func (o *RunsForRunForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the runs for run forbidden response
func (o *RunsForRunForbidden) Code() int {
	return 403
}

func (o *RunsForRunForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/{run_ref}][%d] runsForRunForbidden %s", 403, payload)
}

func (o *RunsForRunForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/{run_ref}][%d] runsForRunForbidden %s", 403, payload)
}

func (o *RunsForRunForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *RunsForRunForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
