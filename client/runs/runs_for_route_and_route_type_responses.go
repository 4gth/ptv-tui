// Code generated by go-swagger; DO NOT EDIT.

package runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// RunsForRouteAndRouteTypeReader is a Reader for the RunsForRouteAndRouteType structure.
type RunsForRouteAndRouteTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunsForRouteAndRouteTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunsForRouteAndRouteTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRunsForRouteAndRouteTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRunsForRouteAndRouteTypeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/runs/route/{route_id}/route_type/{route_type}] Runs_ForRouteAndRouteType", response, response.Code())
	}
}

// NewRunsForRouteAndRouteTypeOK creates a RunsForRouteAndRouteTypeOK with default headers values
func NewRunsForRouteAndRouteTypeOK() *RunsForRouteAndRouteTypeOK {
	return &RunsForRouteAndRouteTypeOK{}
}

/*
RunsForRouteAndRouteTypeOK describes a response with status code 200, with default header values.

All trip/service run details for the specified route ID and route type.
*/
type RunsForRouteAndRouteTypeOK struct {
	Payload *models.V3RunsResponse
}

// IsSuccess returns true when this runs for route and route type o k response has a 2xx status code
func (o *RunsForRouteAndRouteTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this runs for route and route type o k response has a 3xx status code
func (o *RunsForRouteAndRouteTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this runs for route and route type o k response has a 4xx status code
func (o *RunsForRouteAndRouteTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this runs for route and route type o k response has a 5xx status code
func (o *RunsForRouteAndRouteTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this runs for route and route type o k response a status code equal to that given
func (o *RunsForRouteAndRouteTypeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the runs for route and route type o k response
func (o *RunsForRouteAndRouteTypeOK) Code() int {
	return 200
}

func (o *RunsForRouteAndRouteTypeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/route/{route_id}/route_type/{route_type}][%d] runsForRouteAndRouteTypeOK %s", 200, payload)
}

func (o *RunsForRouteAndRouteTypeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/route/{route_id}/route_type/{route_type}][%d] runsForRouteAndRouteTypeOK %s", 200, payload)
}

func (o *RunsForRouteAndRouteTypeOK) GetPayload() *models.V3RunsResponse {
	return o.Payload
}

func (o *RunsForRouteAndRouteTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3RunsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsForRouteAndRouteTypeBadRequest creates a RunsForRouteAndRouteTypeBadRequest with default headers values
func NewRunsForRouteAndRouteTypeBadRequest() *RunsForRouteAndRouteTypeBadRequest {
	return &RunsForRouteAndRouteTypeBadRequest{}
}

/*
RunsForRouteAndRouteTypeBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type RunsForRouteAndRouteTypeBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this runs for route and route type bad request response has a 2xx status code
func (o *RunsForRouteAndRouteTypeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this runs for route and route type bad request response has a 3xx status code
func (o *RunsForRouteAndRouteTypeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this runs for route and route type bad request response has a 4xx status code
func (o *RunsForRouteAndRouteTypeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this runs for route and route type bad request response has a 5xx status code
func (o *RunsForRouteAndRouteTypeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this runs for route and route type bad request response a status code equal to that given
func (o *RunsForRouteAndRouteTypeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the runs for route and route type bad request response
func (o *RunsForRouteAndRouteTypeBadRequest) Code() int {
	return 400
}

func (o *RunsForRouteAndRouteTypeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/route/{route_id}/route_type/{route_type}][%d] runsForRouteAndRouteTypeBadRequest %s", 400, payload)
}

func (o *RunsForRouteAndRouteTypeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/route/{route_id}/route_type/{route_type}][%d] runsForRouteAndRouteTypeBadRequest %s", 400, payload)
}

func (o *RunsForRouteAndRouteTypeBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *RunsForRouteAndRouteTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsForRouteAndRouteTypeForbidden creates a RunsForRouteAndRouteTypeForbidden with default headers values
func NewRunsForRouteAndRouteTypeForbidden() *RunsForRouteAndRouteTypeForbidden {
	return &RunsForRouteAndRouteTypeForbidden{}
}

/*
RunsForRouteAndRouteTypeForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type RunsForRouteAndRouteTypeForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this runs for route and route type forbidden response has a 2xx status code
func (o *RunsForRouteAndRouteTypeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this runs for route and route type forbidden response has a 3xx status code
func (o *RunsForRouteAndRouteTypeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this runs for route and route type forbidden response has a 4xx status code
func (o *RunsForRouteAndRouteTypeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this runs for route and route type forbidden response has a 5xx status code
func (o *RunsForRouteAndRouteTypeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this runs for route and route type forbidden response a status code equal to that given
func (o *RunsForRouteAndRouteTypeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the runs for route and route type forbidden response
func (o *RunsForRouteAndRouteTypeForbidden) Code() int {
	return 403
}

func (o *RunsForRouteAndRouteTypeForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/route/{route_id}/route_type/{route_type}][%d] runsForRouteAndRouteTypeForbidden %s", 403, payload)
}

func (o *RunsForRouteAndRouteTypeForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/route/{route_id}/route_type/{route_type}][%d] runsForRouteAndRouteTypeForbidden %s", 403, payload)
}

func (o *RunsForRouteAndRouteTypeForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *RunsForRouteAndRouteTypeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
