// Code generated by go-swagger; DO NOT EDIT.

package runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRunsForRouteParams creates a new RunsForRouteParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRunsForRouteParams() *RunsForRouteParams {
	return &RunsForRouteParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRunsForRouteParamsWithTimeout creates a new RunsForRouteParams object
// with the ability to set a timeout on a request.
func NewRunsForRouteParamsWithTimeout(timeout time.Duration) *RunsForRouteParams {
	return &RunsForRouteParams{
		timeout: timeout,
	}
}

// NewRunsForRouteParamsWithContext creates a new RunsForRouteParams object
// with the ability to set a context for a request.
func NewRunsForRouteParamsWithContext(ctx context.Context) *RunsForRouteParams {
	return &RunsForRouteParams{
		Context: ctx,
	}
}

// NewRunsForRouteParamsWithHTTPClient creates a new RunsForRouteParams object
// with the ability to set a custom HTTPClient for a request.
func NewRunsForRouteParamsWithHTTPClient(client *http.Client) *RunsForRouteParams {
	return &RunsForRouteParams{
		HTTPClient: client,
	}
}

/*
RunsForRouteParams contains all the parameters to send to the API endpoint

	for the runs for route operation.

	Typically these are written to a http.Request.
*/
type RunsForRouteParams struct {

	/* DateUtc.

	   Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)

	   Format: date-time
	*/
	DateUtc *strfmt.DateTime

	/* Devid.

	   Your developer id
	*/
	Devid *string

	/* Expand.

	   List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.
	*/
	Expand []int32

	/* IncludeAdvertisedInterchange.

	     Indicates whether data related to interchanges should be included in the response (default = false).
	When set to true, this parameter enables API clients to retrieve additional exchange information (stops, routes, runs, directions and disruptions) in a single call instead of making multiple requests
	*/
	IncludeAdvertisedInterchange *bool

	/* RouteID.

	   Identifier of route; values returned by Routes API - v3/routes.

	   Format: int32
	*/
	RouteID int32

	/* Signature.

	   Authentication signature for request
	*/
	Signature *string

	/* Token.

	   Please ignore
	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the runs for route params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RunsForRouteParams) WithDefaults() *RunsForRouteParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the runs for route params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RunsForRouteParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the runs for route params
func (o *RunsForRouteParams) WithTimeout(timeout time.Duration) *RunsForRouteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the runs for route params
func (o *RunsForRouteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the runs for route params
func (o *RunsForRouteParams) WithContext(ctx context.Context) *RunsForRouteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the runs for route params
func (o *RunsForRouteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the runs for route params
func (o *RunsForRouteParams) WithHTTPClient(client *http.Client) *RunsForRouteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the runs for route params
func (o *RunsForRouteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDateUtc adds the dateUtc to the runs for route params
func (o *RunsForRouteParams) WithDateUtc(dateUtc *strfmt.DateTime) *RunsForRouteParams {
	o.SetDateUtc(dateUtc)
	return o
}

// SetDateUtc adds the dateUtc to the runs for route params
func (o *RunsForRouteParams) SetDateUtc(dateUtc *strfmt.DateTime) {
	o.DateUtc = dateUtc
}

// WithDevid adds the devid to the runs for route params
func (o *RunsForRouteParams) WithDevid(devid *string) *RunsForRouteParams {
	o.SetDevid(devid)
	return o
}

// SetDevid adds the devid to the runs for route params
func (o *RunsForRouteParams) SetDevid(devid *string) {
	o.Devid = devid
}

// WithExpand adds the expand to the runs for route params
func (o *RunsForRouteParams) WithExpand(expand []int32) *RunsForRouteParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the runs for route params
func (o *RunsForRouteParams) SetExpand(expand []int32) {
	o.Expand = expand
}

// WithIncludeAdvertisedInterchange adds the includeAdvertisedInterchange to the runs for route params
func (o *RunsForRouteParams) WithIncludeAdvertisedInterchange(includeAdvertisedInterchange *bool) *RunsForRouteParams {
	o.SetIncludeAdvertisedInterchange(includeAdvertisedInterchange)
	return o
}

// SetIncludeAdvertisedInterchange adds the includeAdvertisedInterchange to the runs for route params
func (o *RunsForRouteParams) SetIncludeAdvertisedInterchange(includeAdvertisedInterchange *bool) {
	o.IncludeAdvertisedInterchange = includeAdvertisedInterchange
}

// WithRouteID adds the routeID to the runs for route params
func (o *RunsForRouteParams) WithRouteID(routeID int32) *RunsForRouteParams {
	o.SetRouteID(routeID)
	return o
}

// SetRouteID adds the routeId to the runs for route params
func (o *RunsForRouteParams) SetRouteID(routeID int32) {
	o.RouteID = routeID
}

// WithSignature adds the signature to the runs for route params
func (o *RunsForRouteParams) WithSignature(signature *string) *RunsForRouteParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the runs for route params
func (o *RunsForRouteParams) SetSignature(signature *string) {
	o.Signature = signature
}

// WithToken adds the token to the runs for route params
func (o *RunsForRouteParams) WithToken(token *string) *RunsForRouteParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the runs for route params
func (o *RunsForRouteParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *RunsForRouteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DateUtc != nil {

		// query param date_utc
		var qrDateUtc strfmt.DateTime

		if o.DateUtc != nil {
			qrDateUtc = *o.DateUtc
		}
		qDateUtc := qrDateUtc.String()
		if qDateUtc != "" {

			if err := r.SetQueryParam("date_utc", qDateUtc); err != nil {
				return err
			}
		}
	}

	if o.Devid != nil {

		// query param devid
		var qrDevid string

		if o.Devid != nil {
			qrDevid = *o.Devid
		}
		qDevid := qrDevid
		if qDevid != "" {

			if err := r.SetQueryParam("devid", qDevid); err != nil {
				return err
			}
		}
	}

	if o.Expand != nil {

		// binding items for expand
		joinedExpand := o.bindParamExpand(reg)

		// query array param expand
		if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
			return err
		}
	}

	if o.IncludeAdvertisedInterchange != nil {

		// query param include_advertised_interchange
		var qrIncludeAdvertisedInterchange bool

		if o.IncludeAdvertisedInterchange != nil {
			qrIncludeAdvertisedInterchange = *o.IncludeAdvertisedInterchange
		}
		qIncludeAdvertisedInterchange := swag.FormatBool(qrIncludeAdvertisedInterchange)
		if qIncludeAdvertisedInterchange != "" {

			if err := r.SetQueryParam("include_advertised_interchange", qIncludeAdvertisedInterchange); err != nil {
				return err
			}
		}
	}

	// path param route_id
	if err := r.SetPathParam("route_id", swag.FormatInt32(o.RouteID)); err != nil {
		return err
	}

	if o.Signature != nil {

		// query param signature
		var qrSignature string

		if o.Signature != nil {
			qrSignature = *o.Signature
		}
		qSignature := qrSignature
		if qSignature != "" {

			if err := r.SetQueryParam("signature", qSignature); err != nil {
				return err
			}
		}
	}

	if o.Token != nil {

		// query param token
		var qrToken string

		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {

			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamRunsForRoute binds the parameter expand
func (o *RunsForRouteParams) bindParamExpand(formats strfmt.Registry) []string {
	expandIR := o.Expand

	var expandIC []string
	for _, expandIIR := range expandIR { // explode []int32

		expandIIV := swag.FormatInt32(expandIIR) // int32 as string
		expandIC = append(expandIC, expandIIV)
	}

	// items.CollectionFormat: "multi"
	expandIS := swag.JoinByFormat(expandIC, "multi")

	return expandIS
}
