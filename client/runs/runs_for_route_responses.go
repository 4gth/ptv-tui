// Code generated by go-swagger; DO NOT EDIT.

package runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// RunsForRouteReader is a Reader for the RunsForRoute structure.
type RunsForRouteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunsForRouteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunsForRouteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRunsForRouteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRunsForRouteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/runs/route/{route_id}] Runs_ForRoute", response, response.Code())
	}
}

// NewRunsForRouteOK creates a RunsForRouteOK with default headers values
func NewRunsForRouteOK() *RunsForRouteOK {
	return &RunsForRouteOK{}
}

/*
RunsForRouteOK describes a response with status code 200, with default header values.

All trip/service run details for the specified route ID.
*/
type RunsForRouteOK struct {
	Payload *models.V3RunsResponse
}

// IsSuccess returns true when this runs for route o k response has a 2xx status code
func (o *RunsForRouteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this runs for route o k response has a 3xx status code
func (o *RunsForRouteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this runs for route o k response has a 4xx status code
func (o *RunsForRouteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this runs for route o k response has a 5xx status code
func (o *RunsForRouteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this runs for route o k response a status code equal to that given
func (o *RunsForRouteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the runs for route o k response
func (o *RunsForRouteOK) Code() int {
	return 200
}

func (o *RunsForRouteOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/route/{route_id}][%d] runsForRouteOK %s", 200, payload)
}

func (o *RunsForRouteOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/route/{route_id}][%d] runsForRouteOK %s", 200, payload)
}

func (o *RunsForRouteOK) GetPayload() *models.V3RunsResponse {
	return o.Payload
}

func (o *RunsForRouteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3RunsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsForRouteBadRequest creates a RunsForRouteBadRequest with default headers values
func NewRunsForRouteBadRequest() *RunsForRouteBadRequest {
	return &RunsForRouteBadRequest{}
}

/*
RunsForRouteBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type RunsForRouteBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this runs for route bad request response has a 2xx status code
func (o *RunsForRouteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this runs for route bad request response has a 3xx status code
func (o *RunsForRouteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this runs for route bad request response has a 4xx status code
func (o *RunsForRouteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this runs for route bad request response has a 5xx status code
func (o *RunsForRouteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this runs for route bad request response a status code equal to that given
func (o *RunsForRouteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the runs for route bad request response
func (o *RunsForRouteBadRequest) Code() int {
	return 400
}

func (o *RunsForRouteBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/route/{route_id}][%d] runsForRouteBadRequest %s", 400, payload)
}

func (o *RunsForRouteBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/route/{route_id}][%d] runsForRouteBadRequest %s", 400, payload)
}

func (o *RunsForRouteBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *RunsForRouteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsForRouteForbidden creates a RunsForRouteForbidden with default headers values
func NewRunsForRouteForbidden() *RunsForRouteForbidden {
	return &RunsForRouteForbidden{}
}

/*
RunsForRouteForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type RunsForRouteForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this runs for route forbidden response has a 2xx status code
func (o *RunsForRouteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this runs for route forbidden response has a 3xx status code
func (o *RunsForRouteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this runs for route forbidden response has a 4xx status code
func (o *RunsForRouteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this runs for route forbidden response has a 5xx status code
func (o *RunsForRouteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this runs for route forbidden response a status code equal to that given
func (o *RunsForRouteForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the runs for route forbidden response
func (o *RunsForRouteForbidden) Code() int {
	return 403
}

func (o *RunsForRouteForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/route/{route_id}][%d] runsForRouteForbidden %s", 403, payload)
}

func (o *RunsForRouteForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/runs/route/{route_id}][%d] runsForRouteForbidden %s", 403, payload)
}

func (o *RunsForRouteForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *RunsForRouteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
