// Code generated by go-swagger; DO NOT EDIT.

package stops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// StopsStopsByGeolocationReader is a Reader for the StopsStopsByGeolocation structure.
type StopsStopsByGeolocationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopsStopsByGeolocationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStopsStopsByGeolocationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStopsStopsByGeolocationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStopsStopsByGeolocationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/stops/location/{latitude},{longitude}] Stops_StopsByGeolocation", response, response.Code())
	}
}

// NewStopsStopsByGeolocationOK creates a StopsStopsByGeolocationOK with default headers values
func NewStopsStopsByGeolocationOK() *StopsStopsByGeolocationOK {
	return &StopsStopsByGeolocationOK{}
}

/*
StopsStopsByGeolocationOK describes a response with status code 200, with default header values.

All stops near the specified location.
*/
type StopsStopsByGeolocationOK struct {
	Payload *models.V3StopsByDistanceResponse
}

// IsSuccess returns true when this stops stops by geolocation o k response has a 2xx status code
func (o *StopsStopsByGeolocationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stops stops by geolocation o k response has a 3xx status code
func (o *StopsStopsByGeolocationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stops stops by geolocation o k response has a 4xx status code
func (o *StopsStopsByGeolocationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stops stops by geolocation o k response has a 5xx status code
func (o *StopsStopsByGeolocationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stops stops by geolocation o k response a status code equal to that given
func (o *StopsStopsByGeolocationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stops stops by geolocation o k response
func (o *StopsStopsByGeolocationOK) Code() int {
	return 200
}

func (o *StopsStopsByGeolocationOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/stops/location/{latitude},{longitude}][%d] stopsStopsByGeolocationOK %s", 200, payload)
}

func (o *StopsStopsByGeolocationOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/stops/location/{latitude},{longitude}][%d] stopsStopsByGeolocationOK %s", 200, payload)
}

func (o *StopsStopsByGeolocationOK) GetPayload() *models.V3StopsByDistanceResponse {
	return o.Payload
}

func (o *StopsStopsByGeolocationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3StopsByDistanceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopsStopsByGeolocationBadRequest creates a StopsStopsByGeolocationBadRequest with default headers values
func NewStopsStopsByGeolocationBadRequest() *StopsStopsByGeolocationBadRequest {
	return &StopsStopsByGeolocationBadRequest{}
}

/*
StopsStopsByGeolocationBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type StopsStopsByGeolocationBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this stops stops by geolocation bad request response has a 2xx status code
func (o *StopsStopsByGeolocationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stops stops by geolocation bad request response has a 3xx status code
func (o *StopsStopsByGeolocationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stops stops by geolocation bad request response has a 4xx status code
func (o *StopsStopsByGeolocationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stops stops by geolocation bad request response has a 5xx status code
func (o *StopsStopsByGeolocationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stops stops by geolocation bad request response a status code equal to that given
func (o *StopsStopsByGeolocationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stops stops by geolocation bad request response
func (o *StopsStopsByGeolocationBadRequest) Code() int {
	return 400
}

func (o *StopsStopsByGeolocationBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/stops/location/{latitude},{longitude}][%d] stopsStopsByGeolocationBadRequest %s", 400, payload)
}

func (o *StopsStopsByGeolocationBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/stops/location/{latitude},{longitude}][%d] stopsStopsByGeolocationBadRequest %s", 400, payload)
}

func (o *StopsStopsByGeolocationBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *StopsStopsByGeolocationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopsStopsByGeolocationForbidden creates a StopsStopsByGeolocationForbidden with default headers values
func NewStopsStopsByGeolocationForbidden() *StopsStopsByGeolocationForbidden {
	return &StopsStopsByGeolocationForbidden{}
}

/*
StopsStopsByGeolocationForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type StopsStopsByGeolocationForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this stops stops by geolocation forbidden response has a 2xx status code
func (o *StopsStopsByGeolocationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stops stops by geolocation forbidden response has a 3xx status code
func (o *StopsStopsByGeolocationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stops stops by geolocation forbidden response has a 4xx status code
func (o *StopsStopsByGeolocationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stops stops by geolocation forbidden response has a 5xx status code
func (o *StopsStopsByGeolocationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stops stops by geolocation forbidden response a status code equal to that given
func (o *StopsStopsByGeolocationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the stops stops by geolocation forbidden response
func (o *StopsStopsByGeolocationForbidden) Code() int {
	return 403
}

func (o *StopsStopsByGeolocationForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/stops/location/{latitude},{longitude}][%d] stopsStopsByGeolocationForbidden %s", 403, payload)
}

func (o *StopsStopsByGeolocationForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/stops/location/{latitude},{longitude}][%d] stopsStopsByGeolocationForbidden %s", 403, payload)
}

func (o *StopsStopsByGeolocationForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *StopsStopsByGeolocationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
