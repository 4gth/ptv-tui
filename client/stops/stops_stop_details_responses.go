// Code generated by go-swagger; DO NOT EDIT.

package stops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// StopsStopDetailsReader is a Reader for the StopsStopDetails structure.
type StopsStopDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopsStopDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStopsStopDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStopsStopDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStopsStopDetailsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/stops/{stop_id}/route_type/{route_type}] Stops_StopDetails", response, response.Code())
	}
}

// NewStopsStopDetailsOK creates a StopsStopDetailsOK with default headers values
func NewStopsStopDetailsOK() *StopsStopDetailsOK {
	return &StopsStopDetailsOK{}
}

/*
StopsStopDetailsOK describes a response with status code 200, with default header values.

Stop location, amenity and accessibility facility information for the specified stop (metropolitan and V/Line stations only).
*/
type StopsStopDetailsOK struct {
	Payload *models.V3StopResponse
}

// IsSuccess returns true when this stops stop details o k response has a 2xx status code
func (o *StopsStopDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stops stop details o k response has a 3xx status code
func (o *StopsStopDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stops stop details o k response has a 4xx status code
func (o *StopsStopDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stops stop details o k response has a 5xx status code
func (o *StopsStopDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stops stop details o k response a status code equal to that given
func (o *StopsStopDetailsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stops stop details o k response
func (o *StopsStopDetailsOK) Code() int {
	return 200
}

func (o *StopsStopDetailsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/stops/{stop_id}/route_type/{route_type}][%d] stopsStopDetailsOK %s", 200, payload)
}

func (o *StopsStopDetailsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/stops/{stop_id}/route_type/{route_type}][%d] stopsStopDetailsOK %s", 200, payload)
}

func (o *StopsStopDetailsOK) GetPayload() *models.V3StopResponse {
	return o.Payload
}

func (o *StopsStopDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3StopResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopsStopDetailsBadRequest creates a StopsStopDetailsBadRequest with default headers values
func NewStopsStopDetailsBadRequest() *StopsStopDetailsBadRequest {
	return &StopsStopDetailsBadRequest{}
}

/*
StopsStopDetailsBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type StopsStopDetailsBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this stops stop details bad request response has a 2xx status code
func (o *StopsStopDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stops stop details bad request response has a 3xx status code
func (o *StopsStopDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stops stop details bad request response has a 4xx status code
func (o *StopsStopDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stops stop details bad request response has a 5xx status code
func (o *StopsStopDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stops stop details bad request response a status code equal to that given
func (o *StopsStopDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stops stop details bad request response
func (o *StopsStopDetailsBadRequest) Code() int {
	return 400
}

func (o *StopsStopDetailsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/stops/{stop_id}/route_type/{route_type}][%d] stopsStopDetailsBadRequest %s", 400, payload)
}

func (o *StopsStopDetailsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/stops/{stop_id}/route_type/{route_type}][%d] stopsStopDetailsBadRequest %s", 400, payload)
}

func (o *StopsStopDetailsBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *StopsStopDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopsStopDetailsForbidden creates a StopsStopDetailsForbidden with default headers values
func NewStopsStopDetailsForbidden() *StopsStopDetailsForbidden {
	return &StopsStopDetailsForbidden{}
}

/*
StopsStopDetailsForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type StopsStopDetailsForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this stops stop details forbidden response has a 2xx status code
func (o *StopsStopDetailsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stops stop details forbidden response has a 3xx status code
func (o *StopsStopDetailsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stops stop details forbidden response has a 4xx status code
func (o *StopsStopDetailsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stops stop details forbidden response has a 5xx status code
func (o *StopsStopDetailsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stops stop details forbidden response a status code equal to that given
func (o *StopsStopDetailsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the stops stop details forbidden response
func (o *StopsStopDetailsForbidden) Code() int {
	return 403
}

func (o *StopsStopDetailsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/stops/{stop_id}/route_type/{route_type}][%d] stopsStopDetailsForbidden %s", 403, payload)
}

func (o *StopsStopDetailsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/stops/{stop_id}/route_type/{route_type}][%d] stopsStopDetailsForbidden %s", 403, payload)
}

func (o *StopsStopDetailsForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *StopsStopDetailsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
