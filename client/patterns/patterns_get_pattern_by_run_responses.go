// Code generated by go-swagger; DO NOT EDIT.

package patterns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// PatternsGetPatternByRunReader is a Reader for the PatternsGetPatternByRun structure.
type PatternsGetPatternByRunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatternsGetPatternByRunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatternsGetPatternByRunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatternsGetPatternByRunBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatternsGetPatternByRunForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/pattern/run/{run_ref}/route_type/{route_type}] Patterns_GetPatternByRun", response, response.Code())
	}
}

// NewPatternsGetPatternByRunOK creates a PatternsGetPatternByRunOK with default headers values
func NewPatternsGetPatternByRunOK() *PatternsGetPatternByRunOK {
	return &PatternsGetPatternByRunOK{}
}

/*
PatternsGetPatternByRunOK describes a response with status code 200, with default header values.

The stopping pattern of the specified run_ref and route type. (NOTE: the departure sequence field should be used to sort departures in chronological order, however it is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4)
*/
type PatternsGetPatternByRunOK struct {
	Payload *models.V3StoppingPattern
}

// IsSuccess returns true when this patterns get pattern by run o k response has a 2xx status code
func (o *PatternsGetPatternByRunOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patterns get pattern by run o k response has a 3xx status code
func (o *PatternsGetPatternByRunOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patterns get pattern by run o k response has a 4xx status code
func (o *PatternsGetPatternByRunOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patterns get pattern by run o k response has a 5xx status code
func (o *PatternsGetPatternByRunOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patterns get pattern by run o k response a status code equal to that given
func (o *PatternsGetPatternByRunOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patterns get pattern by run o k response
func (o *PatternsGetPatternByRunOK) Code() int {
	return 200
}

func (o *PatternsGetPatternByRunOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/pattern/run/{run_ref}/route_type/{route_type}][%d] patternsGetPatternByRunOK %s", 200, payload)
}

func (o *PatternsGetPatternByRunOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/pattern/run/{run_ref}/route_type/{route_type}][%d] patternsGetPatternByRunOK %s", 200, payload)
}

func (o *PatternsGetPatternByRunOK) GetPayload() *models.V3StoppingPattern {
	return o.Payload
}

func (o *PatternsGetPatternByRunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3StoppingPattern)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatternsGetPatternByRunBadRequest creates a PatternsGetPatternByRunBadRequest with default headers values
func NewPatternsGetPatternByRunBadRequest() *PatternsGetPatternByRunBadRequest {
	return &PatternsGetPatternByRunBadRequest{}
}

/*
PatternsGetPatternByRunBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type PatternsGetPatternByRunBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this patterns get pattern by run bad request response has a 2xx status code
func (o *PatternsGetPatternByRunBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patterns get pattern by run bad request response has a 3xx status code
func (o *PatternsGetPatternByRunBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patterns get pattern by run bad request response has a 4xx status code
func (o *PatternsGetPatternByRunBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patterns get pattern by run bad request response has a 5xx status code
func (o *PatternsGetPatternByRunBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patterns get pattern by run bad request response a status code equal to that given
func (o *PatternsGetPatternByRunBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patterns get pattern by run bad request response
func (o *PatternsGetPatternByRunBadRequest) Code() int {
	return 400
}

func (o *PatternsGetPatternByRunBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/pattern/run/{run_ref}/route_type/{route_type}][%d] patternsGetPatternByRunBadRequest %s", 400, payload)
}

func (o *PatternsGetPatternByRunBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/pattern/run/{run_ref}/route_type/{route_type}][%d] patternsGetPatternByRunBadRequest %s", 400, payload)
}

func (o *PatternsGetPatternByRunBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *PatternsGetPatternByRunBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatternsGetPatternByRunForbidden creates a PatternsGetPatternByRunForbidden with default headers values
func NewPatternsGetPatternByRunForbidden() *PatternsGetPatternByRunForbidden {
	return &PatternsGetPatternByRunForbidden{}
}

/*
PatternsGetPatternByRunForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type PatternsGetPatternByRunForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this patterns get pattern by run forbidden response has a 2xx status code
func (o *PatternsGetPatternByRunForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patterns get pattern by run forbidden response has a 3xx status code
func (o *PatternsGetPatternByRunForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patterns get pattern by run forbidden response has a 4xx status code
func (o *PatternsGetPatternByRunForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patterns get pattern by run forbidden response has a 5xx status code
func (o *PatternsGetPatternByRunForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patterns get pattern by run forbidden response a status code equal to that given
func (o *PatternsGetPatternByRunForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patterns get pattern by run forbidden response
func (o *PatternsGetPatternByRunForbidden) Code() int {
	return 403
}

func (o *PatternsGetPatternByRunForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/pattern/run/{run_ref}/route_type/{route_type}][%d] patternsGetPatternByRunForbidden %s", 403, payload)
}

func (o *PatternsGetPatternByRunForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/pattern/run/{run_ref}/route_type/{route_type}][%d] patternsGetPatternByRunForbidden %s", 403, payload)
}

func (o *PatternsGetPatternByRunForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *PatternsGetPatternByRunForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
