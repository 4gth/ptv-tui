// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRoutesRouteFromIDParams creates a new RoutesRouteFromIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRoutesRouteFromIDParams() *RoutesRouteFromIDParams {
	return &RoutesRouteFromIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRoutesRouteFromIDParamsWithTimeout creates a new RoutesRouteFromIDParams object
// with the ability to set a timeout on a request.
func NewRoutesRouteFromIDParamsWithTimeout(timeout time.Duration) *RoutesRouteFromIDParams {
	return &RoutesRouteFromIDParams{
		timeout: timeout,
	}
}

// NewRoutesRouteFromIDParamsWithContext creates a new RoutesRouteFromIDParams object
// with the ability to set a context for a request.
func NewRoutesRouteFromIDParamsWithContext(ctx context.Context) *RoutesRouteFromIDParams {
	return &RoutesRouteFromIDParams{
		Context: ctx,
	}
}

// NewRoutesRouteFromIDParamsWithHTTPClient creates a new RoutesRouteFromIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewRoutesRouteFromIDParamsWithHTTPClient(client *http.Client) *RoutesRouteFromIDParams {
	return &RoutesRouteFromIDParams{
		HTTPClient: client,
	}
}

/*
RoutesRouteFromIDParams contains all the parameters to send to the API endpoint

	for the routes route from Id operation.

	Typically these are written to a http.Request.
*/
type RoutesRouteFromIDParams struct {

	/* Devid.

	   Your developer id
	*/
	Devid *string

	/* GeopathUtc.

	   Filter geopaths by date (ISO 8601 UTC format) (default = current date)

	   Format: date-time
	*/
	GeopathUtc *strfmt.DateTime

	/* IncludeGeopath.

	   Indicates kif geopath data will be returned (default = false)
	*/
	IncludeGeopath *bool

	/* RouteID.

	   Identifier of route; values returned by Departures, Directions and Disruptions APIs

	   Format: int32
	*/
	RouteID int32

	/* Signature.

	   Authentication signature for request
	*/
	Signature *string

	/* Token.

	   Please ignore
	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the routes route from Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RoutesRouteFromIDParams) WithDefaults() *RoutesRouteFromIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the routes route from Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RoutesRouteFromIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the routes route from Id params
func (o *RoutesRouteFromIDParams) WithTimeout(timeout time.Duration) *RoutesRouteFromIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the routes route from Id params
func (o *RoutesRouteFromIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the routes route from Id params
func (o *RoutesRouteFromIDParams) WithContext(ctx context.Context) *RoutesRouteFromIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the routes route from Id params
func (o *RoutesRouteFromIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the routes route from Id params
func (o *RoutesRouteFromIDParams) WithHTTPClient(client *http.Client) *RoutesRouteFromIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the routes route from Id params
func (o *RoutesRouteFromIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevid adds the devid to the routes route from Id params
func (o *RoutesRouteFromIDParams) WithDevid(devid *string) *RoutesRouteFromIDParams {
	o.SetDevid(devid)
	return o
}

// SetDevid adds the devid to the routes route from Id params
func (o *RoutesRouteFromIDParams) SetDevid(devid *string) {
	o.Devid = devid
}

// WithGeopathUtc adds the geopathUtc to the routes route from Id params
func (o *RoutesRouteFromIDParams) WithGeopathUtc(geopathUtc *strfmt.DateTime) *RoutesRouteFromIDParams {
	o.SetGeopathUtc(geopathUtc)
	return o
}

// SetGeopathUtc adds the geopathUtc to the routes route from Id params
func (o *RoutesRouteFromIDParams) SetGeopathUtc(geopathUtc *strfmt.DateTime) {
	o.GeopathUtc = geopathUtc
}

// WithIncludeGeopath adds the includeGeopath to the routes route from Id params
func (o *RoutesRouteFromIDParams) WithIncludeGeopath(includeGeopath *bool) *RoutesRouteFromIDParams {
	o.SetIncludeGeopath(includeGeopath)
	return o
}

// SetIncludeGeopath adds the includeGeopath to the routes route from Id params
func (o *RoutesRouteFromIDParams) SetIncludeGeopath(includeGeopath *bool) {
	o.IncludeGeopath = includeGeopath
}

// WithRouteID adds the routeID to the routes route from Id params
func (o *RoutesRouteFromIDParams) WithRouteID(routeID int32) *RoutesRouteFromIDParams {
	o.SetRouteID(routeID)
	return o
}

// SetRouteID adds the routeId to the routes route from Id params
func (o *RoutesRouteFromIDParams) SetRouteID(routeID int32) {
	o.RouteID = routeID
}

// WithSignature adds the signature to the routes route from Id params
func (o *RoutesRouteFromIDParams) WithSignature(signature *string) *RoutesRouteFromIDParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the routes route from Id params
func (o *RoutesRouteFromIDParams) SetSignature(signature *string) {
	o.Signature = signature
}

// WithToken adds the token to the routes route from Id params
func (o *RoutesRouteFromIDParams) WithToken(token *string) *RoutesRouteFromIDParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the routes route from Id params
func (o *RoutesRouteFromIDParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *RoutesRouteFromIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Devid != nil {

		// query param devid
		var qrDevid string

		if o.Devid != nil {
			qrDevid = *o.Devid
		}
		qDevid := qrDevid
		if qDevid != "" {

			if err := r.SetQueryParam("devid", qDevid); err != nil {
				return err
			}
		}
	}

	if o.GeopathUtc != nil {

		// query param geopath_utc
		var qrGeopathUtc strfmt.DateTime

		if o.GeopathUtc != nil {
			qrGeopathUtc = *o.GeopathUtc
		}
		qGeopathUtc := qrGeopathUtc.String()
		if qGeopathUtc != "" {

			if err := r.SetQueryParam("geopath_utc", qGeopathUtc); err != nil {
				return err
			}
		}
	}

	if o.IncludeGeopath != nil {

		// query param include_geopath
		var qrIncludeGeopath bool

		if o.IncludeGeopath != nil {
			qrIncludeGeopath = *o.IncludeGeopath
		}
		qIncludeGeopath := swag.FormatBool(qrIncludeGeopath)
		if qIncludeGeopath != "" {

			if err := r.SetQueryParam("include_geopath", qIncludeGeopath); err != nil {
				return err
			}
		}
	}

	// path param route_id
	if err := r.SetPathParam("route_id", swag.FormatInt32(o.RouteID)); err != nil {
		return err
	}

	if o.Signature != nil {

		// query param signature
		var qrSignature string

		if o.Signature != nil {
			qrSignature = *o.Signature
		}
		qSignature := qrSignature
		if qSignature != "" {

			if err := r.SetQueryParam("signature", qSignature); err != nil {
				return err
			}
		}
	}

	if o.Token != nil {

		// query param token
		var qrToken string

		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {

			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
