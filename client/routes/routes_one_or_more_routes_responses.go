// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// RoutesOneOrMoreRoutesReader is a Reader for the RoutesOneOrMoreRoutes structure.
type RoutesOneOrMoreRoutesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RoutesOneOrMoreRoutesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRoutesOneOrMoreRoutesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRoutesOneOrMoreRoutesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRoutesOneOrMoreRoutesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/routes] Routes_OneOrMoreRoutes", response, response.Code())
	}
}

// NewRoutesOneOrMoreRoutesOK creates a RoutesOneOrMoreRoutesOK with default headers values
func NewRoutesOneOrMoreRoutesOK() *RoutesOneOrMoreRoutesOK {
	return &RoutesOneOrMoreRoutesOK{}
}

/*
RoutesOneOrMoreRoutesOK describes a response with status code 200, with default header values.

Route names and numbers for all routes of all route types.
*/
type RoutesOneOrMoreRoutesOK struct {
	Payload *models.V3RouteResponse
}

// IsSuccess returns true when this routes one or more routes o k response has a 2xx status code
func (o *RoutesOneOrMoreRoutesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this routes one or more routes o k response has a 3xx status code
func (o *RoutesOneOrMoreRoutesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this routes one or more routes o k response has a 4xx status code
func (o *RoutesOneOrMoreRoutesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this routes one or more routes o k response has a 5xx status code
func (o *RoutesOneOrMoreRoutesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this routes one or more routes o k response a status code equal to that given
func (o *RoutesOneOrMoreRoutesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the routes one or more routes o k response
func (o *RoutesOneOrMoreRoutesOK) Code() int {
	return 200
}

func (o *RoutesOneOrMoreRoutesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/routes][%d] routesOneOrMoreRoutesOK %s", 200, payload)
}

func (o *RoutesOneOrMoreRoutesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/routes][%d] routesOneOrMoreRoutesOK %s", 200, payload)
}

func (o *RoutesOneOrMoreRoutesOK) GetPayload() *models.V3RouteResponse {
	return o.Payload
}

func (o *RoutesOneOrMoreRoutesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3RouteResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoutesOneOrMoreRoutesBadRequest creates a RoutesOneOrMoreRoutesBadRequest with default headers values
func NewRoutesOneOrMoreRoutesBadRequest() *RoutesOneOrMoreRoutesBadRequest {
	return &RoutesOneOrMoreRoutesBadRequest{}
}

/*
RoutesOneOrMoreRoutesBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type RoutesOneOrMoreRoutesBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this routes one or more routes bad request response has a 2xx status code
func (o *RoutesOneOrMoreRoutesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this routes one or more routes bad request response has a 3xx status code
func (o *RoutesOneOrMoreRoutesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this routes one or more routes bad request response has a 4xx status code
func (o *RoutesOneOrMoreRoutesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this routes one or more routes bad request response has a 5xx status code
func (o *RoutesOneOrMoreRoutesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this routes one or more routes bad request response a status code equal to that given
func (o *RoutesOneOrMoreRoutesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the routes one or more routes bad request response
func (o *RoutesOneOrMoreRoutesBadRequest) Code() int {
	return 400
}

func (o *RoutesOneOrMoreRoutesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/routes][%d] routesOneOrMoreRoutesBadRequest %s", 400, payload)
}

func (o *RoutesOneOrMoreRoutesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/routes][%d] routesOneOrMoreRoutesBadRequest %s", 400, payload)
}

func (o *RoutesOneOrMoreRoutesBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *RoutesOneOrMoreRoutesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoutesOneOrMoreRoutesForbidden creates a RoutesOneOrMoreRoutesForbidden with default headers values
func NewRoutesOneOrMoreRoutesForbidden() *RoutesOneOrMoreRoutesForbidden {
	return &RoutesOneOrMoreRoutesForbidden{}
}

/*
RoutesOneOrMoreRoutesForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type RoutesOneOrMoreRoutesForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this routes one or more routes forbidden response has a 2xx status code
func (o *RoutesOneOrMoreRoutesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this routes one or more routes forbidden response has a 3xx status code
func (o *RoutesOneOrMoreRoutesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this routes one or more routes forbidden response has a 4xx status code
func (o *RoutesOneOrMoreRoutesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this routes one or more routes forbidden response has a 5xx status code
func (o *RoutesOneOrMoreRoutesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this routes one or more routes forbidden response a status code equal to that given
func (o *RoutesOneOrMoreRoutesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the routes one or more routes forbidden response
func (o *RoutesOneOrMoreRoutesForbidden) Code() int {
	return 403
}

func (o *RoutesOneOrMoreRoutesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/routes][%d] routesOneOrMoreRoutesForbidden %s", 403, payload)
}

func (o *RoutesOneOrMoreRoutesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/routes][%d] routesOneOrMoreRoutesForbidden %s", 403, payload)
}

func (o *RoutesOneOrMoreRoutesForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *RoutesOneOrMoreRoutesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
