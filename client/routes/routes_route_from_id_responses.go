// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// RoutesRouteFromIDReader is a Reader for the RoutesRouteFromID structure.
type RoutesRouteFromIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RoutesRouteFromIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRoutesRouteFromIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRoutesRouteFromIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRoutesRouteFromIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/routes/{route_id}] Routes_RouteFromId", response, response.Code())
	}
}

// NewRoutesRouteFromIDOK creates a RoutesRouteFromIDOK with default headers values
func NewRoutesRouteFromIDOK() *RoutesRouteFromIDOK {
	return &RoutesRouteFromIDOK{}
}

/*
RoutesRouteFromIDOK describes a response with status code 200, with default header values.

The route name and number for the specified route ID.
*/
type RoutesRouteFromIDOK struct {
	Payload *models.V3RouteResponse
}

// IsSuccess returns true when this routes route from Id o k response has a 2xx status code
func (o *RoutesRouteFromIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this routes route from Id o k response has a 3xx status code
func (o *RoutesRouteFromIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this routes route from Id o k response has a 4xx status code
func (o *RoutesRouteFromIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this routes route from Id o k response has a 5xx status code
func (o *RoutesRouteFromIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this routes route from Id o k response a status code equal to that given
func (o *RoutesRouteFromIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the routes route from Id o k response
func (o *RoutesRouteFromIDOK) Code() int {
	return 200
}

func (o *RoutesRouteFromIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/routes/{route_id}][%d] routesRouteFromIdOK %s", 200, payload)
}

func (o *RoutesRouteFromIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/routes/{route_id}][%d] routesRouteFromIdOK %s", 200, payload)
}

func (o *RoutesRouteFromIDOK) GetPayload() *models.V3RouteResponse {
	return o.Payload
}

func (o *RoutesRouteFromIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3RouteResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoutesRouteFromIDBadRequest creates a RoutesRouteFromIDBadRequest with default headers values
func NewRoutesRouteFromIDBadRequest() *RoutesRouteFromIDBadRequest {
	return &RoutesRouteFromIDBadRequest{}
}

/*
RoutesRouteFromIDBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type RoutesRouteFromIDBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this routes route from Id bad request response has a 2xx status code
func (o *RoutesRouteFromIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this routes route from Id bad request response has a 3xx status code
func (o *RoutesRouteFromIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this routes route from Id bad request response has a 4xx status code
func (o *RoutesRouteFromIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this routes route from Id bad request response has a 5xx status code
func (o *RoutesRouteFromIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this routes route from Id bad request response a status code equal to that given
func (o *RoutesRouteFromIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the routes route from Id bad request response
func (o *RoutesRouteFromIDBadRequest) Code() int {
	return 400
}

func (o *RoutesRouteFromIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/routes/{route_id}][%d] routesRouteFromIdBadRequest %s", 400, payload)
}

func (o *RoutesRouteFromIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/routes/{route_id}][%d] routesRouteFromIdBadRequest %s", 400, payload)
}

func (o *RoutesRouteFromIDBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *RoutesRouteFromIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoutesRouteFromIDForbidden creates a RoutesRouteFromIDForbidden with default headers values
func NewRoutesRouteFromIDForbidden() *RoutesRouteFromIDForbidden {
	return &RoutesRouteFromIDForbidden{}
}

/*
RoutesRouteFromIDForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type RoutesRouteFromIDForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this routes route from Id forbidden response has a 2xx status code
func (o *RoutesRouteFromIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this routes route from Id forbidden response has a 3xx status code
func (o *RoutesRouteFromIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this routes route from Id forbidden response has a 4xx status code
func (o *RoutesRouteFromIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this routes route from Id forbidden response has a 5xx status code
func (o *RoutesRouteFromIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this routes route from Id forbidden response a status code equal to that given
func (o *RoutesRouteFromIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the routes route from Id forbidden response
func (o *RoutesRouteFromIDForbidden) Code() int {
	return 403
}

func (o *RoutesRouteFromIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/routes/{route_id}][%d] routesRouteFromIdForbidden %s", 403, payload)
}

func (o *RoutesRouteFromIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/routes/{route_id}][%d] routesRouteFromIdForbidden %s", 403, payload)
}

func (o *RoutesRouteFromIDForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *RoutesRouteFromIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
