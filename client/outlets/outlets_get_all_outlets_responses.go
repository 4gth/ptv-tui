// Code generated by go-swagger; DO NOT EDIT.

package outlets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// OutletsGetAllOutletsReader is a Reader for the OutletsGetAllOutlets structure.
type OutletsGetAllOutletsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OutletsGetAllOutletsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOutletsGetAllOutletsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOutletsGetAllOutletsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOutletsGetAllOutletsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/outlets] Outlets_GetAllOutlets", response, response.Code())
	}
}

// NewOutletsGetAllOutletsOK creates a OutletsGetAllOutletsOK with default headers values
func NewOutletsGetAllOutletsOK() *OutletsGetAllOutletsOK {
	return &OutletsGetAllOutletsOK{}
}

/*
OutletsGetAllOutletsOK describes a response with status code 200, with default header values.

Ticket outlets.
*/
type OutletsGetAllOutletsOK struct {
	Payload *models.V3OutletResponse
}

// IsSuccess returns true when this outlets get all outlets o k response has a 2xx status code
func (o *OutletsGetAllOutletsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this outlets get all outlets o k response has a 3xx status code
func (o *OutletsGetAllOutletsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this outlets get all outlets o k response has a 4xx status code
func (o *OutletsGetAllOutletsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this outlets get all outlets o k response has a 5xx status code
func (o *OutletsGetAllOutletsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this outlets get all outlets o k response a status code equal to that given
func (o *OutletsGetAllOutletsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the outlets get all outlets o k response
func (o *OutletsGetAllOutletsOK) Code() int {
	return 200
}

func (o *OutletsGetAllOutletsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/outlets][%d] outletsGetAllOutletsOK %s", 200, payload)
}

func (o *OutletsGetAllOutletsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/outlets][%d] outletsGetAllOutletsOK %s", 200, payload)
}

func (o *OutletsGetAllOutletsOK) GetPayload() *models.V3OutletResponse {
	return o.Payload
}

func (o *OutletsGetAllOutletsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3OutletResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOutletsGetAllOutletsBadRequest creates a OutletsGetAllOutletsBadRequest with default headers values
func NewOutletsGetAllOutletsBadRequest() *OutletsGetAllOutletsBadRequest {
	return &OutletsGetAllOutletsBadRequest{}
}

/*
OutletsGetAllOutletsBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type OutletsGetAllOutletsBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this outlets get all outlets bad request response has a 2xx status code
func (o *OutletsGetAllOutletsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this outlets get all outlets bad request response has a 3xx status code
func (o *OutletsGetAllOutletsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this outlets get all outlets bad request response has a 4xx status code
func (o *OutletsGetAllOutletsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this outlets get all outlets bad request response has a 5xx status code
func (o *OutletsGetAllOutletsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this outlets get all outlets bad request response a status code equal to that given
func (o *OutletsGetAllOutletsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the outlets get all outlets bad request response
func (o *OutletsGetAllOutletsBadRequest) Code() int {
	return 400
}

func (o *OutletsGetAllOutletsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/outlets][%d] outletsGetAllOutletsBadRequest %s", 400, payload)
}

func (o *OutletsGetAllOutletsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/outlets][%d] outletsGetAllOutletsBadRequest %s", 400, payload)
}

func (o *OutletsGetAllOutletsBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *OutletsGetAllOutletsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOutletsGetAllOutletsForbidden creates a OutletsGetAllOutletsForbidden with default headers values
func NewOutletsGetAllOutletsForbidden() *OutletsGetAllOutletsForbidden {
	return &OutletsGetAllOutletsForbidden{}
}

/*
OutletsGetAllOutletsForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type OutletsGetAllOutletsForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this outlets get all outlets forbidden response has a 2xx status code
func (o *OutletsGetAllOutletsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this outlets get all outlets forbidden response has a 3xx status code
func (o *OutletsGetAllOutletsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this outlets get all outlets forbidden response has a 4xx status code
func (o *OutletsGetAllOutletsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this outlets get all outlets forbidden response has a 5xx status code
func (o *OutletsGetAllOutletsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this outlets get all outlets forbidden response a status code equal to that given
func (o *OutletsGetAllOutletsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the outlets get all outlets forbidden response
func (o *OutletsGetAllOutletsForbidden) Code() int {
	return 403
}

func (o *OutletsGetAllOutletsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/outlets][%d] outletsGetAllOutletsForbidden %s", 403, payload)
}

func (o *OutletsGetAllOutletsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/outlets][%d] outletsGetAllOutletsForbidden %s", 403, payload)
}

func (o *OutletsGetAllOutletsForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *OutletsGetAllOutletsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
