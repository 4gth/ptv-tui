// Code generated by go-swagger; DO NOT EDIT.

package outlets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// OutletsGetOutletsByGeolocationReader is a Reader for the OutletsGetOutletsByGeolocation structure.
type OutletsGetOutletsByGeolocationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OutletsGetOutletsByGeolocationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOutletsGetOutletsByGeolocationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOutletsGetOutletsByGeolocationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOutletsGetOutletsByGeolocationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/outlets/location/{latitude},{longitude}] Outlets_GetOutletsByGeolocation", response, response.Code())
	}
}

// NewOutletsGetOutletsByGeolocationOK creates a OutletsGetOutletsByGeolocationOK with default headers values
func NewOutletsGetOutletsByGeolocationOK() *OutletsGetOutletsByGeolocationOK {
	return &OutletsGetOutletsByGeolocationOK{}
}

/*
OutletsGetOutletsByGeolocationOK describes a response with status code 200, with default header values.

Ticket outlets near the specified location.
*/
type OutletsGetOutletsByGeolocationOK struct {
	Payload *models.V3OutletGeolocationResponse
}

// IsSuccess returns true when this outlets get outlets by geolocation o k response has a 2xx status code
func (o *OutletsGetOutletsByGeolocationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this outlets get outlets by geolocation o k response has a 3xx status code
func (o *OutletsGetOutletsByGeolocationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this outlets get outlets by geolocation o k response has a 4xx status code
func (o *OutletsGetOutletsByGeolocationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this outlets get outlets by geolocation o k response has a 5xx status code
func (o *OutletsGetOutletsByGeolocationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this outlets get outlets by geolocation o k response a status code equal to that given
func (o *OutletsGetOutletsByGeolocationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the outlets get outlets by geolocation o k response
func (o *OutletsGetOutletsByGeolocationOK) Code() int {
	return 200
}

func (o *OutletsGetOutletsByGeolocationOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/outlets/location/{latitude},{longitude}][%d] outletsGetOutletsByGeolocationOK %s", 200, payload)
}

func (o *OutletsGetOutletsByGeolocationOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/outlets/location/{latitude},{longitude}][%d] outletsGetOutletsByGeolocationOK %s", 200, payload)
}

func (o *OutletsGetOutletsByGeolocationOK) GetPayload() *models.V3OutletGeolocationResponse {
	return o.Payload
}

func (o *OutletsGetOutletsByGeolocationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3OutletGeolocationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOutletsGetOutletsByGeolocationBadRequest creates a OutletsGetOutletsByGeolocationBadRequest with default headers values
func NewOutletsGetOutletsByGeolocationBadRequest() *OutletsGetOutletsByGeolocationBadRequest {
	return &OutletsGetOutletsByGeolocationBadRequest{}
}

/*
OutletsGetOutletsByGeolocationBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type OutletsGetOutletsByGeolocationBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this outlets get outlets by geolocation bad request response has a 2xx status code
func (o *OutletsGetOutletsByGeolocationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this outlets get outlets by geolocation bad request response has a 3xx status code
func (o *OutletsGetOutletsByGeolocationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this outlets get outlets by geolocation bad request response has a 4xx status code
func (o *OutletsGetOutletsByGeolocationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this outlets get outlets by geolocation bad request response has a 5xx status code
func (o *OutletsGetOutletsByGeolocationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this outlets get outlets by geolocation bad request response a status code equal to that given
func (o *OutletsGetOutletsByGeolocationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the outlets get outlets by geolocation bad request response
func (o *OutletsGetOutletsByGeolocationBadRequest) Code() int {
	return 400
}

func (o *OutletsGetOutletsByGeolocationBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/outlets/location/{latitude},{longitude}][%d] outletsGetOutletsByGeolocationBadRequest %s", 400, payload)
}

func (o *OutletsGetOutletsByGeolocationBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/outlets/location/{latitude},{longitude}][%d] outletsGetOutletsByGeolocationBadRequest %s", 400, payload)
}

func (o *OutletsGetOutletsByGeolocationBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *OutletsGetOutletsByGeolocationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOutletsGetOutletsByGeolocationForbidden creates a OutletsGetOutletsByGeolocationForbidden with default headers values
func NewOutletsGetOutletsByGeolocationForbidden() *OutletsGetOutletsByGeolocationForbidden {
	return &OutletsGetOutletsByGeolocationForbidden{}
}

/*
OutletsGetOutletsByGeolocationForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type OutletsGetOutletsByGeolocationForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this outlets get outlets by geolocation forbidden response has a 2xx status code
func (o *OutletsGetOutletsByGeolocationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this outlets get outlets by geolocation forbidden response has a 3xx status code
func (o *OutletsGetOutletsByGeolocationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this outlets get outlets by geolocation forbidden response has a 4xx status code
func (o *OutletsGetOutletsByGeolocationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this outlets get outlets by geolocation forbidden response has a 5xx status code
func (o *OutletsGetOutletsByGeolocationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this outlets get outlets by geolocation forbidden response a status code equal to that given
func (o *OutletsGetOutletsByGeolocationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the outlets get outlets by geolocation forbidden response
func (o *OutletsGetOutletsByGeolocationForbidden) Code() int {
	return 403
}

func (o *OutletsGetOutletsByGeolocationForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/outlets/location/{latitude},{longitude}][%d] outletsGetOutletsByGeolocationForbidden %s", 403, payload)
}

func (o *OutletsGetOutletsByGeolocationForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/outlets/location/{latitude},{longitude}][%d] outletsGetOutletsByGeolocationForbidden %s", 403, payload)
}

func (o *OutletsGetOutletsByGeolocationForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *OutletsGetOutletsByGeolocationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
