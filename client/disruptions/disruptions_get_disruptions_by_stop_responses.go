// Code generated by go-swagger; DO NOT EDIT.

package disruptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// DisruptionsGetDisruptionsByStopReader is a Reader for the DisruptionsGetDisruptionsByStop structure.
type DisruptionsGetDisruptionsByStopReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DisruptionsGetDisruptionsByStopReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDisruptionsGetDisruptionsByStopOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDisruptionsGetDisruptionsByStopBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDisruptionsGetDisruptionsByStopForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/disruptions/stop/{stop_id}] Disruptions_GetDisruptionsByStop", response, response.Code())
	}
}

// NewDisruptionsGetDisruptionsByStopOK creates a DisruptionsGetDisruptionsByStopOK with default headers values
func NewDisruptionsGetDisruptionsByStopOK() *DisruptionsGetDisruptionsByStopOK {
	return &DisruptionsGetDisruptionsByStopOK{}
}

/*
DisruptionsGetDisruptionsByStopOK describes a response with status code 200, with default header values.

All disruption information (if any exists) for the specified stop.
*/
type DisruptionsGetDisruptionsByStopOK struct {
	Payload *models.V3DisruptionsResponse
}

// IsSuccess returns true when this disruptions get disruptions by stop o k response has a 2xx status code
func (o *DisruptionsGetDisruptionsByStopOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this disruptions get disruptions by stop o k response has a 3xx status code
func (o *DisruptionsGetDisruptionsByStopOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disruptions get disruptions by stop o k response has a 4xx status code
func (o *DisruptionsGetDisruptionsByStopOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this disruptions get disruptions by stop o k response has a 5xx status code
func (o *DisruptionsGetDisruptionsByStopOK) IsServerError() bool {
	return false
}

// IsCode returns true when this disruptions get disruptions by stop o k response a status code equal to that given
func (o *DisruptionsGetDisruptionsByStopOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the disruptions get disruptions by stop o k response
func (o *DisruptionsGetDisruptionsByStopOK) Code() int {
	return 200
}

func (o *DisruptionsGetDisruptionsByStopOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/disruptions/stop/{stop_id}][%d] disruptionsGetDisruptionsByStopOK %s", 200, payload)
}

func (o *DisruptionsGetDisruptionsByStopOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/disruptions/stop/{stop_id}][%d] disruptionsGetDisruptionsByStopOK %s", 200, payload)
}

func (o *DisruptionsGetDisruptionsByStopOK) GetPayload() *models.V3DisruptionsResponse {
	return o.Payload
}

func (o *DisruptionsGetDisruptionsByStopOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3DisruptionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisruptionsGetDisruptionsByStopBadRequest creates a DisruptionsGetDisruptionsByStopBadRequest with default headers values
func NewDisruptionsGetDisruptionsByStopBadRequest() *DisruptionsGetDisruptionsByStopBadRequest {
	return &DisruptionsGetDisruptionsByStopBadRequest{}
}

/*
DisruptionsGetDisruptionsByStopBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type DisruptionsGetDisruptionsByStopBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this disruptions get disruptions by stop bad request response has a 2xx status code
func (o *DisruptionsGetDisruptionsByStopBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this disruptions get disruptions by stop bad request response has a 3xx status code
func (o *DisruptionsGetDisruptionsByStopBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disruptions get disruptions by stop bad request response has a 4xx status code
func (o *DisruptionsGetDisruptionsByStopBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this disruptions get disruptions by stop bad request response has a 5xx status code
func (o *DisruptionsGetDisruptionsByStopBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this disruptions get disruptions by stop bad request response a status code equal to that given
func (o *DisruptionsGetDisruptionsByStopBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the disruptions get disruptions by stop bad request response
func (o *DisruptionsGetDisruptionsByStopBadRequest) Code() int {
	return 400
}

func (o *DisruptionsGetDisruptionsByStopBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/disruptions/stop/{stop_id}][%d] disruptionsGetDisruptionsByStopBadRequest %s", 400, payload)
}

func (o *DisruptionsGetDisruptionsByStopBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/disruptions/stop/{stop_id}][%d] disruptionsGetDisruptionsByStopBadRequest %s", 400, payload)
}

func (o *DisruptionsGetDisruptionsByStopBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DisruptionsGetDisruptionsByStopBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisruptionsGetDisruptionsByStopForbidden creates a DisruptionsGetDisruptionsByStopForbidden with default headers values
func NewDisruptionsGetDisruptionsByStopForbidden() *DisruptionsGetDisruptionsByStopForbidden {
	return &DisruptionsGetDisruptionsByStopForbidden{}
}

/*
DisruptionsGetDisruptionsByStopForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type DisruptionsGetDisruptionsByStopForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this disruptions get disruptions by stop forbidden response has a 2xx status code
func (o *DisruptionsGetDisruptionsByStopForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this disruptions get disruptions by stop forbidden response has a 3xx status code
func (o *DisruptionsGetDisruptionsByStopForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disruptions get disruptions by stop forbidden response has a 4xx status code
func (o *DisruptionsGetDisruptionsByStopForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this disruptions get disruptions by stop forbidden response has a 5xx status code
func (o *DisruptionsGetDisruptionsByStopForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this disruptions get disruptions by stop forbidden response a status code equal to that given
func (o *DisruptionsGetDisruptionsByStopForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the disruptions get disruptions by stop forbidden response
func (o *DisruptionsGetDisruptionsByStopForbidden) Code() int {
	return 403
}

func (o *DisruptionsGetDisruptionsByStopForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/disruptions/stop/{stop_id}][%d] disruptionsGetDisruptionsByStopForbidden %s", 403, payload)
}

func (o *DisruptionsGetDisruptionsByStopForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/disruptions/stop/{stop_id}][%d] disruptionsGetDisruptionsByStopForbidden %s", 403, payload)
}

func (o *DisruptionsGetDisruptionsByStopForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DisruptionsGetDisruptionsByStopForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
