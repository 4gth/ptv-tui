// Code generated by go-swagger; DO NOT EDIT.

package disruptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDisruptionsGetAllDisruptionsParams creates a new DisruptionsGetAllDisruptionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDisruptionsGetAllDisruptionsParams() *DisruptionsGetAllDisruptionsParams {
	return &DisruptionsGetAllDisruptionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDisruptionsGetAllDisruptionsParamsWithTimeout creates a new DisruptionsGetAllDisruptionsParams object
// with the ability to set a timeout on a request.
func NewDisruptionsGetAllDisruptionsParamsWithTimeout(timeout time.Duration) *DisruptionsGetAllDisruptionsParams {
	return &DisruptionsGetAllDisruptionsParams{
		timeout: timeout,
	}
}

// NewDisruptionsGetAllDisruptionsParamsWithContext creates a new DisruptionsGetAllDisruptionsParams object
// with the ability to set a context for a request.
func NewDisruptionsGetAllDisruptionsParamsWithContext(ctx context.Context) *DisruptionsGetAllDisruptionsParams {
	return &DisruptionsGetAllDisruptionsParams{
		Context: ctx,
	}
}

// NewDisruptionsGetAllDisruptionsParamsWithHTTPClient creates a new DisruptionsGetAllDisruptionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewDisruptionsGetAllDisruptionsParamsWithHTTPClient(client *http.Client) *DisruptionsGetAllDisruptionsParams {
	return &DisruptionsGetAllDisruptionsParams{
		HTTPClient: client,
	}
}

/*
DisruptionsGetAllDisruptionsParams contains all the parameters to send to the API endpoint

	for the disruptions get all disruptions operation.

	Typically these are written to a http.Request.
*/
type DisruptionsGetAllDisruptionsParams struct {

	/* Devid.

	   Your developer id
	*/
	Devid *string

	/* DisruptionModes.

	   Filter by disruption_mode; values returned via v3/disruptions/modes API
	*/
	DisruptionModes []int32

	/* DisruptionStatus.

	   Filter by status of disruption
	*/
	DisruptionStatus *string

	/* RouteTypes.

	   Filter by route_type; values returned via RouteTypes API
	*/
	RouteTypes []int32

	/* Signature.

	   Authentication signature for request
	*/
	Signature *string

	/* Token.

	   Please ignore
	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the disruptions get all disruptions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DisruptionsGetAllDisruptionsParams) WithDefaults() *DisruptionsGetAllDisruptionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the disruptions get all disruptions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DisruptionsGetAllDisruptionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) WithTimeout(timeout time.Duration) *DisruptionsGetAllDisruptionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) WithContext(ctx context.Context) *DisruptionsGetAllDisruptionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) WithHTTPClient(client *http.Client) *DisruptionsGetAllDisruptionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevid adds the devid to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) WithDevid(devid *string) *DisruptionsGetAllDisruptionsParams {
	o.SetDevid(devid)
	return o
}

// SetDevid adds the devid to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) SetDevid(devid *string) {
	o.Devid = devid
}

// WithDisruptionModes adds the disruptionModes to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) WithDisruptionModes(disruptionModes []int32) *DisruptionsGetAllDisruptionsParams {
	o.SetDisruptionModes(disruptionModes)
	return o
}

// SetDisruptionModes adds the disruptionModes to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) SetDisruptionModes(disruptionModes []int32) {
	o.DisruptionModes = disruptionModes
}

// WithDisruptionStatus adds the disruptionStatus to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) WithDisruptionStatus(disruptionStatus *string) *DisruptionsGetAllDisruptionsParams {
	o.SetDisruptionStatus(disruptionStatus)
	return o
}

// SetDisruptionStatus adds the disruptionStatus to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) SetDisruptionStatus(disruptionStatus *string) {
	o.DisruptionStatus = disruptionStatus
}

// WithRouteTypes adds the routeTypes to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) WithRouteTypes(routeTypes []int32) *DisruptionsGetAllDisruptionsParams {
	o.SetRouteTypes(routeTypes)
	return o
}

// SetRouteTypes adds the routeTypes to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) SetRouteTypes(routeTypes []int32) {
	o.RouteTypes = routeTypes
}

// WithSignature adds the signature to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) WithSignature(signature *string) *DisruptionsGetAllDisruptionsParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) SetSignature(signature *string) {
	o.Signature = signature
}

// WithToken adds the token to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) WithToken(token *string) *DisruptionsGetAllDisruptionsParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the disruptions get all disruptions params
func (o *DisruptionsGetAllDisruptionsParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *DisruptionsGetAllDisruptionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Devid != nil {

		// query param devid
		var qrDevid string

		if o.Devid != nil {
			qrDevid = *o.Devid
		}
		qDevid := qrDevid
		if qDevid != "" {

			if err := r.SetQueryParam("devid", qDevid); err != nil {
				return err
			}
		}
	}

	if o.DisruptionModes != nil {

		// binding items for disruption_modes
		joinedDisruptionModes := o.bindParamDisruptionModes(reg)

		// query array param disruption_modes
		if err := r.SetQueryParam("disruption_modes", joinedDisruptionModes...); err != nil {
			return err
		}
	}

	if o.DisruptionStatus != nil {

		// query param disruption_status
		var qrDisruptionStatus string

		if o.DisruptionStatus != nil {
			qrDisruptionStatus = *o.DisruptionStatus
		}
		qDisruptionStatus := qrDisruptionStatus
		if qDisruptionStatus != "" {

			if err := r.SetQueryParam("disruption_status", qDisruptionStatus); err != nil {
				return err
			}
		}
	}

	if o.RouteTypes != nil {

		// binding items for route_types
		joinedRouteTypes := o.bindParamRouteTypes(reg)

		// query array param route_types
		if err := r.SetQueryParam("route_types", joinedRouteTypes...); err != nil {
			return err
		}
	}

	if o.Signature != nil {

		// query param signature
		var qrSignature string

		if o.Signature != nil {
			qrSignature = *o.Signature
		}
		qSignature := qrSignature
		if qSignature != "" {

			if err := r.SetQueryParam("signature", qSignature); err != nil {
				return err
			}
		}
	}

	if o.Token != nil {

		// query param token
		var qrToken string

		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {

			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamDisruptionsGetAllDisruptions binds the parameter disruption_modes
func (o *DisruptionsGetAllDisruptionsParams) bindParamDisruptionModes(formats strfmt.Registry) []string {
	disruptionModesIR := o.DisruptionModes

	var disruptionModesIC []string
	for _, disruptionModesIIR := range disruptionModesIR { // explode []int32

		disruptionModesIIV := swag.FormatInt32(disruptionModesIIR) // int32 as string
		disruptionModesIC = append(disruptionModesIC, disruptionModesIIV)
	}

	// items.CollectionFormat: "multi"
	disruptionModesIS := swag.JoinByFormat(disruptionModesIC, "multi")

	return disruptionModesIS
}

// bindParamDisruptionsGetAllDisruptions binds the parameter route_types
func (o *DisruptionsGetAllDisruptionsParams) bindParamRouteTypes(formats strfmt.Registry) []string {
	routeTypesIR := o.RouteTypes

	var routeTypesIC []string
	for _, routeTypesIIR := range routeTypesIR { // explode []int32

		routeTypesIIV := swag.FormatInt32(routeTypesIIR) // int32 as string
		routeTypesIC = append(routeTypesIC, routeTypesIIV)
	}

	// items.CollectionFormat: "multi"
	routeTypesIS := swag.JoinByFormat(routeTypesIC, "multi")

	return routeTypesIS
}
