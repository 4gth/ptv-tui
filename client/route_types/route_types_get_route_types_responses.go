// Code generated by go-swagger; DO NOT EDIT.

package route_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// RouteTypesGetRouteTypesReader is a Reader for the RouteTypesGetRouteTypes structure.
type RouteTypesGetRouteTypesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RouteTypesGetRouteTypesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRouteTypesGetRouteTypesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRouteTypesGetRouteTypesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRouteTypesGetRouteTypesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/route_types] RouteTypes_GetRouteTypes", response, response.Code())
	}
}

// NewRouteTypesGetRouteTypesOK creates a RouteTypesGetRouteTypesOK with default headers values
func NewRouteTypesGetRouteTypesOK() *RouteTypesGetRouteTypesOK {
	return &RouteTypesGetRouteTypesOK{}
}

/*
RouteTypesGetRouteTypesOK describes a response with status code 200, with default header values.

All route types (i.e. identifiers of transport modes) and their names.
*/
type RouteTypesGetRouteTypesOK struct {
	Payload *models.V3RouteTypesResponse
}

// IsSuccess returns true when this route types get route types o k response has a 2xx status code
func (o *RouteTypesGetRouteTypesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this route types get route types o k response has a 3xx status code
func (o *RouteTypesGetRouteTypesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this route types get route types o k response has a 4xx status code
func (o *RouteTypesGetRouteTypesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this route types get route types o k response has a 5xx status code
func (o *RouteTypesGetRouteTypesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this route types get route types o k response a status code equal to that given
func (o *RouteTypesGetRouteTypesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the route types get route types o k response
func (o *RouteTypesGetRouteTypesOK) Code() int {
	return 200
}

func (o *RouteTypesGetRouteTypesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/route_types][%d] routeTypesGetRouteTypesOK %s", 200, payload)
}

func (o *RouteTypesGetRouteTypesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/route_types][%d] routeTypesGetRouteTypesOK %s", 200, payload)
}

func (o *RouteTypesGetRouteTypesOK) GetPayload() *models.V3RouteTypesResponse {
	return o.Payload
}

func (o *RouteTypesGetRouteTypesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3RouteTypesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRouteTypesGetRouteTypesBadRequest creates a RouteTypesGetRouteTypesBadRequest with default headers values
func NewRouteTypesGetRouteTypesBadRequest() *RouteTypesGetRouteTypesBadRequest {
	return &RouteTypesGetRouteTypesBadRequest{}
}

/*
RouteTypesGetRouteTypesBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type RouteTypesGetRouteTypesBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this route types get route types bad request response has a 2xx status code
func (o *RouteTypesGetRouteTypesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this route types get route types bad request response has a 3xx status code
func (o *RouteTypesGetRouteTypesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this route types get route types bad request response has a 4xx status code
func (o *RouteTypesGetRouteTypesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this route types get route types bad request response has a 5xx status code
func (o *RouteTypesGetRouteTypesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this route types get route types bad request response a status code equal to that given
func (o *RouteTypesGetRouteTypesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the route types get route types bad request response
func (o *RouteTypesGetRouteTypesBadRequest) Code() int {
	return 400
}

func (o *RouteTypesGetRouteTypesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/route_types][%d] routeTypesGetRouteTypesBadRequest %s", 400, payload)
}

func (o *RouteTypesGetRouteTypesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/route_types][%d] routeTypesGetRouteTypesBadRequest %s", 400, payload)
}

func (o *RouteTypesGetRouteTypesBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *RouteTypesGetRouteTypesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRouteTypesGetRouteTypesForbidden creates a RouteTypesGetRouteTypesForbidden with default headers values
func NewRouteTypesGetRouteTypesForbidden() *RouteTypesGetRouteTypesForbidden {
	return &RouteTypesGetRouteTypesForbidden{}
}

/*
RouteTypesGetRouteTypesForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type RouteTypesGetRouteTypesForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this route types get route types forbidden response has a 2xx status code
func (o *RouteTypesGetRouteTypesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this route types get route types forbidden response has a 3xx status code
func (o *RouteTypesGetRouteTypesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this route types get route types forbidden response has a 4xx status code
func (o *RouteTypesGetRouteTypesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this route types get route types forbidden response has a 5xx status code
func (o *RouteTypesGetRouteTypesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this route types get route types forbidden response a status code equal to that given
func (o *RouteTypesGetRouteTypesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the route types get route types forbidden response
func (o *RouteTypesGetRouteTypesForbidden) Code() int {
	return 403
}

func (o *RouteTypesGetRouteTypesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/route_types][%d] routeTypesGetRouteTypesForbidden %s", 403, payload)
}

func (o *RouteTypesGetRouteTypesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/route_types][%d] routeTypesGetRouteTypesForbidden %s", 403, payload)
}

func (o *RouteTypesGetRouteTypesForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *RouteTypesGetRouteTypesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
