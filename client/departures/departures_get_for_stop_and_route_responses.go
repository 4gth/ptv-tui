// Code generated by go-swagger; DO NOT EDIT.

package departures

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ptv-tui/models"
)

// DeparturesGetForStopAndRouteReader is a Reader for the DeparturesGetForStopAndRoute structure.
type DeparturesGetForStopAndRouteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeparturesGetForStopAndRouteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeparturesGetForStopAndRouteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeparturesGetForStopAndRouteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeparturesGetForStopAndRouteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}] Departures_GetForStopAndRoute", response, response.Code())
	}
}

// NewDeparturesGetForStopAndRouteOK creates a DeparturesGetForStopAndRouteOK with default headers values
func NewDeparturesGetForStopAndRouteOK() *DeparturesGetForStopAndRouteOK {
	return &DeparturesGetForStopAndRouteOK{}
}

/*
DeparturesGetForStopAndRouteOK describes a response with status code 200, with default header values.

Service departures from the specified stop for the specified route (and route type); departures are timetabled and real-time (if applicable).
*/
type DeparturesGetForStopAndRouteOK struct {
	Payload *models.V3DeparturesResponse
}

// IsSuccess returns true when this departures get for stop and route o k response has a 2xx status code
func (o *DeparturesGetForStopAndRouteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this departures get for stop and route o k response has a 3xx status code
func (o *DeparturesGetForStopAndRouteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this departures get for stop and route o k response has a 4xx status code
func (o *DeparturesGetForStopAndRouteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this departures get for stop and route o k response has a 5xx status code
func (o *DeparturesGetForStopAndRouteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this departures get for stop and route o k response a status code equal to that given
func (o *DeparturesGetForStopAndRouteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the departures get for stop and route o k response
func (o *DeparturesGetForStopAndRouteOK) Code() int {
	return 200
}

func (o *DeparturesGetForStopAndRouteOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}][%d] departuresGetForStopAndRouteOK %s", 200, payload)
}

func (o *DeparturesGetForStopAndRouteOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}][%d] departuresGetForStopAndRouteOK %s", 200, payload)
}

func (o *DeparturesGetForStopAndRouteOK) GetPayload() *models.V3DeparturesResponse {
	return o.Payload
}

func (o *DeparturesGetForStopAndRouteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3DeparturesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeparturesGetForStopAndRouteBadRequest creates a DeparturesGetForStopAndRouteBadRequest with default headers values
func NewDeparturesGetForStopAndRouteBadRequest() *DeparturesGetForStopAndRouteBadRequest {
	return &DeparturesGetForStopAndRouteBadRequest{}
}

/*
DeparturesGetForStopAndRouteBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type DeparturesGetForStopAndRouteBadRequest struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this departures get for stop and route bad request response has a 2xx status code
func (o *DeparturesGetForStopAndRouteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this departures get for stop and route bad request response has a 3xx status code
func (o *DeparturesGetForStopAndRouteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this departures get for stop and route bad request response has a 4xx status code
func (o *DeparturesGetForStopAndRouteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this departures get for stop and route bad request response has a 5xx status code
func (o *DeparturesGetForStopAndRouteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this departures get for stop and route bad request response a status code equal to that given
func (o *DeparturesGetForStopAndRouteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the departures get for stop and route bad request response
func (o *DeparturesGetForStopAndRouteBadRequest) Code() int {
	return 400
}

func (o *DeparturesGetForStopAndRouteBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}][%d] departuresGetForStopAndRouteBadRequest %s", 400, payload)
}

func (o *DeparturesGetForStopAndRouteBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}][%d] departuresGetForStopAndRouteBadRequest %s", 400, payload)
}

func (o *DeparturesGetForStopAndRouteBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DeparturesGetForStopAndRouteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeparturesGetForStopAndRouteForbidden creates a DeparturesGetForStopAndRouteForbidden with default headers values
func NewDeparturesGetForStopAndRouteForbidden() *DeparturesGetForStopAndRouteForbidden {
	return &DeparturesGetForStopAndRouteForbidden{}
}

/*
DeparturesGetForStopAndRouteForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type DeparturesGetForStopAndRouteForbidden struct {
	Payload *models.V3ErrorResponse
}

// IsSuccess returns true when this departures get for stop and route forbidden response has a 2xx status code
func (o *DeparturesGetForStopAndRouteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this departures get for stop and route forbidden response has a 3xx status code
func (o *DeparturesGetForStopAndRouteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this departures get for stop and route forbidden response has a 4xx status code
func (o *DeparturesGetForStopAndRouteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this departures get for stop and route forbidden response has a 5xx status code
func (o *DeparturesGetForStopAndRouteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this departures get for stop and route forbidden response a status code equal to that given
func (o *DeparturesGetForStopAndRouteForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the departures get for stop and route forbidden response
func (o *DeparturesGetForStopAndRouteForbidden) Code() int {
	return 403
}

func (o *DeparturesGetForStopAndRouteForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}][%d] departuresGetForStopAndRouteForbidden %s", 403, payload)
}

func (o *DeparturesGetForStopAndRouteForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}][%d] departuresGetForStopAndRouteForbidden %s", 403, payload)
}

func (o *DeparturesGetForStopAndRouteForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DeparturesGetForStopAndRouteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
